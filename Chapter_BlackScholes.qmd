{{< include macros.qmd >}}

# Black-Scholes {#sec-c:blackscholes} 

```{python}
#| eval: true
#| echo: false

import plotly
from IPython.display import display, HTML

plotly.offline.init_notebook_mode(connected=True)
display(
    HTML(
        '<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG"></script>'
    )
)
```


This chapter explains the very important Black-Scholes formulas for the values of European calls and puts.  Options are written on asset prices, not dividend-reinvested asset prices, with which we have been primarily dealing to this point.  U.S. companies pay dividends quarterly (if they pay dividends).  If the option will mature before the next dividend is paid (to be more precise, if it matures before the next ex-dividend date, which is when the stock begins trading without right to the subsequent dividend) then dividends are not an issue.  We discuss a model suitable for valuing options that mature after one or more upcoming dividend payments in @sec-c:americans.  In this chapter, we make a simplifying assumption.  We assume that dividends are paid continuously at a rate proportional to the underlying asset price.   the Black-Scholes model suitable for quarterly dividendsThe Black-Scholes assumptions are that the underlying asset pays a constant dividend yield $q$ and has price $S$ satisfying
$$
\frac{\d  S}{S} = \mu\d   t + \sigma\d   B
$$ {#eq-bs1}

for a Brownian motion B.  Here $\sigma$ is assumed to be constant (though we will allow it to vary in a non-random way at the end of the chapter) and $\mu$ can be a quite general random process.  It is also assumed that there is a constant continuously-compounded risk-free rate $r$.

Under these assumptions, we  complete the discussion of @sec-s:introoptions to derive  option pricing formulas.  Recall that, to price a European call option, all that remains to be done is to calculate the probabilities of the option finishing in the money when we use the risk-free asset and the underlying asset as numeraires.  We do this using the results of @sec-s:girsanov.  

## European Call and Put Values


In @sec-s:girsanov---see  @eq-riskneutral11---we learned that under the 
Black-Scholes assumption @eq-bs1 we have
$$\frac{\d  S}{S} =( r-q)\d   t+\sigma\d   B^*\; ,$$
where $B^*$ is a Brownian motion under the risk-neutral probability.^[There is no other risky asset price $Y$ in this model, so the subscripts we used in @sec-s:girsanov] on the volatility coefficients and on $B$ and $B^*$ to distinguish the Brownian motion driving $S$ from the Brownian motion driving $Y$ and to distinguish their volatilities are not needed here.
In @sec-s:geometricbrownianmotion, we observed that this is equivalent to
$$\d  \log S = \left(r-q-\frac{1}{2}\sigma^2\right)\d   t + \sigma\d   B^*\; .$$


A European call option pays $S_T-K$ at date $T$ if $S_T>K$ and 0 otherwise.  Again letting
\begin{equation*}
x =  \begin{cases} 1 & \text{if $S_T>K$}\; ,\\
0 & \text{otherwise}\;,
\end{cases}
\end{equation*}
the payoff of the call can be written as $xS_T-xK$.  This is equivalent to one share digital minus $K$ digitals, with the digitals paying in the event that $S_T>K$.  The share digital is worth $\mathrm{e}^{-q T}S_0\mathrm{N}(d_1)$ at date $0$ and each digital is worth $\mathrm{e}^{-rT}\mathrm{N}(d_2)$.  Note that  @eq-digital_d2 and @eq-sharedigital_d1 for $d_1$ and $d_2$ imply $d_2 = d_1-\sigma{\sqrt{T}}$.  Therefore, combining the results of the previous two sections yields the Black-Scholes formula: \index{Black-Scholes formula}

::: Rule
## 
The value of a European call option at date $0$ is 
$$
\mathrm{e}^{-q T}S_0\mathrm{N}(d_1)-\mathrm{e}^{-rT}K\mathrm{N}(d_2)\;,
$$ {#eq-blackscholescall}

where $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\sigma{\sqrt{T}}$.
:::



A European put option pays $K-S_T$ at date $T$ if $S_T<K$ and 0 otherwise.  As before, let
\begin{equation*}
y =  \begin{cases} 1 & \text{if $S_T<K$}\; ,\\
0 & \text{otherwise}\;.
\end{cases}
\end{equation*}
The payoff of the put option is $yK-yS_T$.  This is equivalent to $K$ digitals minus one  share digital, all of the digitals paying when $S_T<K$.  Thus, we have:

::: Rule
## 
The value of a European put option at date $0$ is 
$$
\mathrm{e}^{-rT}K\mathrm{N}(-d_2)-\mathrm{e}^{-q T}S_0\mathrm{N}(-d_1)\;,
$$ {#eq-blackscholesput}

where $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\sigma{\sqrt{T}}$.
:::


The values of the European put and call satisfy put-call parity, \index{put-call parity} and we can also find one from the other by^[The put-call parity relation follows from the fact that both the left and the right-hand sides are the prices of portfolios that have value $\max(S_T,K)$ at the maturity of the option.  To see this for the left-hand side, note that $\mathrm{e}^{-rT}K$ is sufficient cash to accumulate to $K$ at date $T$, allowing exercise of the call when it is in the money and retention of the cash $K$ otherwise.  For the right-hand side, note that $\mathrm{e}^{-q T}S_0$ is enough cash to buy $\mathrm{e}^{-q T}$ shares of the stock at date $0$ which, with reinvestment of dividends, will accumulate to one share at date $T$, enabling exercise of the put if it is in the money or retention of the share otherwise.]
$$
\mathrm{e}^{-rT}K + \text{Call Price} = \mathrm{e}^{-q T}S_0+ \text{Put Price}\;.
$$ {#eq-putcallparity11}

The following figure shows how the Black-Scholes call and put values depend on the underlying asset price and other model parameters.  The call and put values are computed with the following code.

```{python}
import numpy as np
from scipy.stats import norm

def black_scholes_call(S, K, r, sigma, q, T):
    """
    Inputs:
    S = initial stock price
    K = strike price
    r = risk-free rate
    sigma = volatility
    q = dividend yield
    T = time to maturity
    """
    if sigma <= 0 or T <= 0:
        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)
    
    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    N1 = norm.cdf(d1)
    N2 = norm.cdf(d2)
    return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2

def black_scholes_put(S, K, r, sigma, q, T):
    """
    Inputs:
    S = initial stock price
    K = strike price
    r = risk-free rate
    sigma = volatility
    q = dividend yield
    T = time to maturity
    """
    if sigma <= 0 or T <= 0:
        return max(0, np.exp(-r * T) * K - np.exp(-q * T) * S)

    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    N1 = norm.cdf(-d1)
    N2 = norm.cdf(-d2)
    return np.exp(-r * T) * K * N2 - np.exp(-q * T) * S * N1
```


::: {#fig-bs-call-put} 
<iframe height="800" width ="720" src="https://black-scholes-call-put.streamlit.app/?embed=true"></iframe>
Black-Scholes Explorer
:::

## Greeks





The derivatives (calculus derivatives, not financial derivatives!) of an option pricing formula with respect to the inputs are commonly called Greeks.  \index{Greeks} The most important Greek is  the option delta.  This measures the sensitivity of the option value to changes in the value of the underlying asset.  The following table shows the standard Greeks, with reference to the Black-Scholes pricing formula.

\begin{table}
\centering
\caption{Black-Scholes Greeks}
\begin{tabular}{lccccc}
\hline \\
\bfseries{Input} & \bfseries{Input Symbol} & \qquad &\bfseries{Greek} & \qquad & \bfseries{Greek Symbol}\\
\hline \\
Stock price & $S$  &\qquad& delta &\qquad& $\delta$ \\
\hline \\
delta & $\delta$ &\qquad& gamma&\qquad & $\Gamma$\\
\hline \\
- Time to maturity  & $-T$&\qquad& theta &\qquad& $\Theta$ \\
\hline \\
Volatility & $\sigma$&\qquad& vega &\qquad& $\cal{V}$ \\
\hline \\
Interest rate & $r$ &\qquad& rho&\qquad & $\rho$\\
\hline
\end{tabular}
\end{table}


| **Input**          | **Input Symbol** |       | **Greek**  |       | **Greek Symbol** |
| ------------------ | ---------------- | ----- | ---------- | ----- | ---------------- |
| Stock price        | $S$              |       | delta      |       | $\delta$         |
| delta              | $\delta$         |       | gamma      |       | $\Gamma$         |
| - Time to maturity | $-T$             |       | theta      |       | $\Theta$         |
| Volatility         | $\sigma$         |       | vega       |       | $\cal{V}$        |
| Interest rate      | $r$              |       | rho        |       | $\rho$           |


The second line of the above shows $\delta$ as an input.^[The delta is frequently denoted by the upper case $\Delta$, but we will use the lower case, reserving the upper case for discrete changes, e.g., $\Delta t$.  One may have noticed also that the symbol for vega is a little different from the others; this reflects the fact that  vega is not actually a Greek letter.]  Of course, it is not an input but instead is calculated.  Gamma, the derivative of $\delta$, is the second derivative of the option price with respect to the underlying asset price.  The reason for calculating $\Theta$ as the derivative with respect to $-T$ instead of $T$ is that the time-to-maturity $T$ decreasing ($-T$ increasing) is equivalent to time passing, so $\Theta$ measures the change in the option value when time passes.  

We can calculate these from the Black-Scholes formula using the chain rule from differential calculus.  The derivative of the normal distribution function $\mathrm{N}$ is the normal density function $\mathrm{n}d$ defined as
$$\mathrm{n}d(d) = \frac{1}{\sqrt{2\pi}}\mathrm{e}^{-d^2/2}\; .$$
One can easily verify directly that
$$
\mathrm{e}^{-q T}S\mathrm{n}d(d_1)=\mathrm{e}^{-rT}K\mathrm{n}d(d_2)\;,
$$ {#eq-greeksimplify}

which simplifies the calculations for the Black-Scholes call option pricing formula. 
For this formula, the Greeks are as follows:
\begin{align*}
\delta &= \mathrm{e}^{-q T}\mathrm{N}(d_1) + \mathrm{e}^{-q T}S\mathrm{n}d(d_1)\frac{\partial d_1}{\partial S} -\mathrm{e}^{-rT}K\mathrm{n}d(d_2)\frac{\partial d_2}{\partial S}\\
&= \mathrm{e}^{-q T}\mathrm{N}(d_1) + \mathrm{e}^{-q T}S\mathrm{n}d(d_1)\left(\frac{\partial d_1}{\partial S}-\frac{\partial d_2}{\partial S}\right)\\
&=\mathrm{e}^{-q T}\mathrm{N}(d_1)\;,\\ 
\Gamma &=\mathrm{e}^{-q T}\mathrm{n}d(d_1)\frac{\partial d_1}{\partial S}= \mathrm{e}^{-q T}\mathrm{n}d(d_1)\frac{1}{S\sigma\sqrt{T}}\;,
\end{align*}
\begin{align*}
 \Theta &=-\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\frac{\partial d_1}{\partial T} +q \mathrm{e}^{-q T}S\mathrm{N}(d_1) \\
&\quad + \mathrm{e}^{-rT}K\mathrm{n}d(d_2)\frac{\partial d_2}{\partial T} -r\mathrm{e}^{-rT}K\mathrm{N}(d_2)\\
&=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\left(\frac{\partial d_2}{\partial T}-\frac{\partial d_1}{\partial T}\right)\\
&\quad + q \mathrm{e}^{-q T}S\mathrm{N}(d_1)-r\mathrm{e}^{-rT}K\mathrm{N}(d_2)\\
&=-\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\frac{\sigma}{2\sqrt{T}}+ q \mathrm{e}^{-q T}S\mathrm{N}(d_1)-r\mathrm{e}^{-rT}K\mathrm{N}(d_2)\;,\\
 \cal{V}&=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\frac{\partial d_1}{\partial \sigma} - \mathrm{e}^{-rT}K\mathrm{n}d(d_2)\frac{\partial d_2}{\partial \sigma}\\
&=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\left(\frac{\partial d_1}{\partial \sigma}-\frac{\partial d_2}{\partial \sigma}\right)\\
&=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\sqrt{T}\;,\\
 \rho &=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\frac{\partial d_1}{\partial r} - \mathrm{e}^{-rT}K\mathrm{n}d(d_2)\frac{\partial d_2}{\partial r} +T\mathrm{e}^{-rT}K\mathrm{N}(d_2)\\
&=\mathrm{e}^{-q T}S\mathrm{n}d(d_1)\left(\frac{\partial d_1}{\partial r}-\frac{\partial d_2}{\partial r}\right)+T\mathrm{e}^{-rT}K\mathrm{N}(d_2)\\
&=T\mathrm{e}^{-rT}K\mathrm{N}(d_2)\;.
\end{align*} 


We can calculate the Greeks of a European put option from the call option Greeks and put-call parity:
$$\text{Put Price} = \text{Call Price} +\mathrm{e}^{-rT}K- \mathrm{e}^{-q T}S_0\; .$$
For example, the delta of a put is the delta of a call (with the same strike and maturity) minus $\mathrm{e}^{-q T}$, and the gamma of a put is the same as the gamma of the corresponding call.

To see how the Greeks respond to changes in the various inputs to the Black-Scholes formula (e.g., interest rate ($r$), time to maturity ($T$) and volatility ($\sigma$)), we encourage readers to interact with the plot below.  The code used for the calculations is here:

``` {python}
import numpy as np
from scipy.stats import norm

def d1(S, K, r, sigma, T):
    """
    Computes d1 used in Black-Scholes.
    """
    return (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

def d2(S, K, r, sigma, T):
    """
    Computes d2 used in Black-Scholes.
    """
    return d1(S, K, r, sigma, T) - sigma * np.sqrt(T)

def call_price(S, K, r, sigma, T):
    """
    Black-Scholes price for a call option.
    """
    d_1 = d1(S, K, r, sigma, T)
    d_2 = d2(S, K, r, sigma, T)
    return S * norm.cdf(d_1) - K * np.exp(-r * T) * norm.cdf(d_2)

def put_price(S, K, r, sigma, T):
    """
    Black-Scholes price for a put option.
    """
    d_1 = d1(S, K, r, sigma, T)
    d_2 = d2(S, K, r, sigma, T)
    return K * np.exp(-r * T) * norm.cdf(-d_2) - S * norm.cdf(-d_1)

def greeks(S, K, r, sigma, T, option_type="call"):
    """
    Return the main Greeks for Black-Scholes.

    Parameters
    ----------
    S : float or numpy array
        Underlying price.
    K : float
        Strike price.
    r : float
        Risk-free interest rate.
    sigma : float
        Volatility.
    T : float
        Time to maturity (in years).
    option_type : str
        'call' or 'put'.
    """
    d_1 = d1(S, K, r, sigma, T)
    d_2 = d2(S, K, r, sigma, T)
    pdf_d1 = norm.pdf(d_1)
    cdf_d1 = norm.cdf(d_1)
    cdf_d2 = norm.cdf(d_2)
    
    if option_type == "call":
        # Delta
        delta = cdf_d1
        # Gamma (same for call & put)
        gamma = pdf_d1 / (S * sigma * np.sqrt(T))
        # Vega (same for call & put, but typically scaled by 0.01 if desired in %)
        vega = S * pdf_d1 * np.sqrt(T)
        # Theta
        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \
                - r * K * np.exp(-r * T) * cdf_d2
        # Rho
        rho = K * T * np.exp(-r * T) * cdf_d2
    else:  # put
        # Delta
        delta = cdf_d1 - 1
        # Gamma (same for call & put)
        gamma = pdf_d1 / (S * sigma * np.sqrt(T))
        # Vega (same for call & put)
        vega = S * pdf_d1 * np.sqrt(T)
        # Theta
        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \
                + r * K * np.exp(-r * T) * norm.cdf(-d_2)
        # Rho
        rho = - K * T * np.exp(-r * T) * norm.cdf(-d_2)

    return delta, gamma, vega, theta, rho
```


::: {#fig-bs-greeks} 
<iframe height="750" width ="720" src="https://bs-greeks.streamlit.app/?embed=true"></iframe>
Black-Scholes Greeks Explorer
:::



## Theta and Gamma in Delta Hedges {#sec-s:deltahedging}

Let $C(t, S_t)$ denote the value at date $t$ of a European call option that matures at $T>t$ under the Black-Scholes assumption.  This value is given by the Black-Scholes call formula, taking the initial underlying asset price to be $S_t$ and the time to maturity to be $T-t$.
Ito's formula tells us that

$$
\d  C = \frac{\partial C}{\partial S}\d   S + \frac{\partial C}{\partial t}\d   t + \frac{1}{2}\frac{\partial^2C}{\partial S^2} (\d  S)^2  
$$

Using our notation for Greeks, this is 
$$
\d  C = \delta \d   S + \Theta \d   t + \frac{1}{2}\Gamma (\d  S)^2  = \delta \d S - \Theta \d t + \frac{1}{2}\Gamma \sigma^2 S^2 \d t\,.
$$

If we sell a call option and combine the proceeds with borrowed funds to buy $\delta$ shares of the underlying asset, as discussed in @sec-c:deltas, then the change in the portfolio value is
$$\delta (\d S + q S \d t) - (\delta S - C)r\d t - \d C$$
which simplifies to
$$\delta q S \d t - (\delta S - C)r\d t - \Theta \d t - \frac{1}{2}\Gamma \sigma^2 S^2 \d t\,.
$$ {#eq-hedgeprofits}

Several aspects of this are noteworthy.  First, as noted earlier, the delta hedge eliminates the exposure to changes in the price of the underlying---there is no $\d  S$ term in @eq-hedgeprofits.  Second, $\Theta$ is negative, because it captures the time decay in the option value; being short the option means the portfolio will profit from time decay at rate $-\Theta$.  Third, this portfolio is short gamma.  We can also say it is short convexity, the term convexity \index{convexity} referring to the convex shape of the option value as a function of the price of the underlying, which translates mathematically to a positive second derivative (gamma).^[A curious reader may ask why we don't say that the portfolio is long concavity instead of saying that it is short convexity.  This is a mystery to your authors also.]  The volatility in the stock makes convexity valuable, and a portfolio that is short convexity will suffer losses.  Finally, the portfolio is earning dividends but paying interest.

It is straightforward to check, from the definitions of $\Theta$, $\Gamma$ and $\delta$ in the preceding section, that
the sum of the terms in @eq-hedgeprofits is zero.  The time decay in the option value and dividends received on the shares of the underlying exactly offset the losses due to convexity and interest.
Therefore, the delta hedge is a perfect hedge.  The portfolio, which has a zero cost, neither earns nor loses money.  This is true not only on average but for every possible change in the stock price.  

## Discretely Rebalanced Delta Hedges 

In practice of course, we cannot continuously rebalance to maintain a perfect delta hedge at every instant.  There is risk when rebalancing at discrete times.  We can model a discretely rebalanced delta hedge as follows.  Consider equally spaced dates $0 = t_0 < t_1 < \cdots < t_n < t_{n+1} = T$.  Let $\Delta t$ denote the time between successive dates.  Suppose we set up a delta hedge at date $0$ for a call option that we have sold.  We sell the call at the Black-Scholes price $C(0, S_0)$.  We use the proceeds plus borrowed funds to buy $\delta_0 = \e^{-qT}\mathrm{N}(d_1)$ shares, where $d_1$ is the parameter at date 0 for the Black-Scholes call value and delta.   We rebalance the hedge at each date $t_1, \ldots, t_n$, holding the short call position until it matures at date $T$.  Rebalancing means that we trade to re-establish the delta hedge based on the Black-Scholes call delta at that date, buying shares when the delta has gone up and selling shares when the delta has fallen.  Let $\delta_t$ denote the Black-Scholes delta at each $t$ and let $C_t denote the Black-Scholes call value $C(t, S_t)$.  

Our cash position at date 0 is $ - (\delta_0S_0 - C_0$.  The cash position changes at each subsequent date due to (i) interest earned/paid on the cash position during the period, (ii) dividends received during the period on the shares owned, and (iii) cash paid or received when buying or selling stock to re-establish the delta hedge.  Approximate the interest on cash in each time period as $r\cdot \Delta t$ per dollar of cash at the beginning of the period.  Approximate the dividends received in each time period as $q \cdot \Delta t$ per dollar value of stock at the beginning of the period.  

The portfolio starts at a zero value at date $0$, because we used none of our own funds to put it on.  Let $V_t$ denote the portfolio value at date $t$.  The change in the portfolio value from $t_i$ to $t_{i+1}$ for each $i$ is
$$V_{t_{i+1}} - V_{t_i} = - (\delta_{t_i}S_{t_i} - V_{t_i})r\Delta t + \delta_{t_i}S_{t_i}q\Delta t + \delta_{t_i}
(S_{t_{i+1}} - S_{t_i}) - (C_{t_{i+1}} - C_{t_i})\,.$$
The terms on the right-hand side are (i) interest paid on borrowed funds, (ii) dividends received on shares owned, (iii) gain or loss on the shares owned, (iv) change in the value of the short call position.  The following figure simulates stock price paths and computes the portfolio value at date $t_{n+1}=T$.  Of course, the call value at date $T$ is its intrinsic value.



::: {#fig-discrete-hedge} 
<iframe height="1200" width ="720" src="https://discrete-delta-hedge.streamlit.app/?embed=true"></iframe>
Discretely Rebalanced Delta Hedge
:::


## Gamma Hedging {#sec-s:gammahedging}

To attempt to improve the performance of a discretely rebalanced delta hedge, we can use another option to create a portfolio that is both delta and gamma neutral.  Being gamma neutral means that the marginal change in the portfolio delta is zero when the underlying price changes.  This reduces the amount of rebalancing needed to maintain a delta hedge, so a discretely rebalanced delta/gamma hedge may be less risky than a discretely rebalanced delta hedge.  

A delta/gamma hedge can be constructed as follows.  Suppose we have sold a call option and we want to hedge both the delta and gamma using the underlying asset and another option, for example, another call option with a different strike.  In practice, one would want to use a liquid option for this purpose, which typically means that the strike of the option will be near the current value of the underlying (i.e., the option used to hedge would be approximately at the money). 

Let $\delta$ and $\Gamma$ denote the delta and gamma of the written option and let $\delta'$ and $\Gamma'$ denote the delta and gamma of the option used to hedge.  Consider holding  $a$ of shares of the stock and $b$ units of the option used to hedge in conjunction with the short option.  The delta of the stock is one ($\d  S/\d  S = 1$), so to obtain a zero portfolio delta we need

$$
0 = - \delta + a + b\delta'.
$$ {#eq-portfoliodelta}

The gamma of the stock is zero ($\d ^2 S/\d  S^2 = d\,1/\d  S = 0$), so to obtain a zero portfolio gamma we need

$$
0 = - \Gamma + b\Gamma'\;. 
$$ {#eq-portfoliogamma}


@eq-portfoliogamma shows that we should hold enough of the second option to neutralize the gamma of the option we have shorted; i.e.,
$$\
b= \frac{\Gamma}{\Gamma'}
$$
@eq-portfoliodelta shows that we should use the stock to delta hedge the portfolio of options; i.e.,
$$
a=\delta - \frac{\Gamma}{\Gamma'}\delta'\;.
$$



## Implied Volatilities {#sec-s:impliedvolatility}

All of the inputs into the option pricing formulas are in theory observable, except for the volatility coefficient $\sigma$.  We can estimate $\sigma$ from historical data (see @sec-c:stochasticvolatility), or estimate it from the prices of other options.  The latter method exploits the fact that there is a one-to-one relationship between the price given by the Black-Scholes formula and the $\sigma$ that is input, so one can take the price as given and infer $\sigma$ from the formula. The $\sigma$ computed in this way is called the implied volatility. \index{implied volatility}  The implied volatility from one option can be used to price another (perhaps non-traded or less actively traded) option.  


Even if we acknowledge that the model is not correct, the computation of implied volatilities is still useful for characterizing market prices, because we can quickly describe an option as expensive or cheap depending on whether its implied volatility is large or small.  Somewhat paradoxically, it is less easy to see if an option is expensive or cheap by looking at its price, because one must consider the price in the context of the exercise price and maturity.  To some extent, the implied volatility normalizes the price relative to the exercise price and maturity.  Of course, it does not always pay to sell expensive options or buy cheap options, unless they are expensive or cheap relative to an accurate model!

If we compute implied volatilities for options with the same maturity but different strikes, we will typically obtain different implied volatilities for different options.  If we plot implied volatility against the strike, the pattern one normally sees for equities and equity indices is the implied volatility declining as the strike increases until the strike is somewhere near the current value of the underlying (so the option is at the money).  The implied volatility then generally flattens out or increases slightly at higher strikes.  The graph looks like a twisted smile (smirk).  This pattern has been very pronounced in equity index option prices since the crash of 1987.  This moneyness structure of implied volatilities is inconsistent with the Black-Scholes model.  It suggests that the risk-neutral return distribution is not lognormal but instead exhibits a higher likelihood of extreme returns than the lognormal distribution (i.e., it has fat tails) with the likelihood of extreme negative returns being higher than the likelihood of extreme positive returns (i.e., it is skewed).  

## Fundamental PDE

## Monte-Carlo Approximation of Black-Scholes


## Binomial Approximation of Black-Scholes









## {.unnumbered}


::: Exercise
 The delta of a digital option that pays \$1 when $S_T>K$ is 
$$\frac{\mathrm{e}^{-rT}\mathrm{n}d(d_2)}{\sigma S\sqrt{T}}\; .$$
Repeat  the previous problem for the delta of this digital.  Given that in reality it is costly to trade (due to commissions, the bid-ask spread and possible adverse price impacts for large trades), do you see any problems with delta hedging a short digital near maturity if it is close to being at the money?
:::

::: Exercise
Modify the  Python code for replicating portfolio insurance to simulate a discrete replication of a digital option using the delta in the previous problem.  Run the code for $10,20,100,1000$ rebalancing dates.  When does the strategy do a good job and when does it fail? 
::: 

::: Exercise
 Repeat @exr-problem4.1 for the gamma of a call option.
:::
::: Exercise
 Use put-call parity to derive the Greeks of a put option, and write a Python function that computes the value and Greeks.
::: 
::: Exercise
 Consider delta and gamma hedging a short call option, using the underlying and a put with the same strike and maturity as the call.  Calculate the position in the underlying and the put that you should take, using the analysis in @sec-s:gammahedging.  Will you ever need to adjust this hedge?  Relate your result to put-call parity.
:::

::: Exercise
 The delta of a share digital that pays one share when $S_T>K$ is 
$$\mathrm{e}^{-qT}\mathrm{N}(d_1) + \frac{\mathrm{e}^{-qT}\mathrm{n}d(d_1)}{\sigma \sqrt{T}}\; .$$
Repeat @exr-problem4.1 for the delta of this share digital.
:::
::: Exercise
 Compute the value of an at-the-money call option ($S=K$) using the Python code for volatilities $\sigma = .01, .02, \ldots, 1.0$.  Plot the call value against the volatility.
:::
::: Exercise
 Repeat the previous problem for  $S=1.2K$ (an example of an in-the-money call option).
:::
::: Exercise
 The file CBO\\EQuotes.txt (available at \verb!www.kerryback.net!) contains price data for call options on the S\&P 500 index.  The options expired in February, 2003, and the prices were obtained on January 22, 2003.  The first column lists various exercise prices.  The second column gives the bid price and the third column the ask price.  Import this data into a Python program and compute and plot the implied volatility against the exercise price using this data.  Use the ask price as the market price for the option.    The options have 30 days to maturity (so $T=30/365$).  At the time the quotes were downloaded, the S\&P 500 was at 884.25.  According to the CBO\\E, the dividend yield on the S\&P 500 was 1.76\%.  Use 1.25\% for the risk-free interest rate.  

:::
::: Exercise
 Attempt to repeat the previous problem using the bid price as the market price of the option.  If this doesn't work, what is wrong?  Does this indicate there is an arbitrage opportunity?

:::
::: Exercise
 Suppose an investor invests in a portfolio with price $S$ and constant dividend yield $q$.  Assume the investor is charged a constant expense ratio $\alpha$ (which acts as a negative dividend) and at date $T$ receives either his portfolio value or his initial investment, whichever is higher.  This is similar to a popular type of variable annuity.  Letting $D$ denote the number of dollars invested in the contract, the contract pays
$$
\max\left(D,\frac{D\mathrm{e}^{(q-\alpha)T}S_T}{S_0}\right)
$$ {#eq-bsp1}
at date $T$.  
We can rearrange the expression @eq-bsp1 as

$$
\max\left(D,\frac{D\mathrm{e}^{(q-\alpha)T}S_T}{S_0}\right) = D + \max\left(0, \frac{D\mathrm{e}^{(q-\alpha)T}S_T}{S_0}-D\right)
$$
$$
= D + \mathrm{e}^{-\alpha T}D\max\left(0,\frac{\mathrm{e}^{qT}S_T}{S_0}-\mathrm{e}^{\alpha T}\right)\;.
$$ {#eq-bsp2}


Thus, the contract payoff is equivalent to the amount invested plus a certain number of call options written on the gross holding period return $\mathrm{e}^{qT}S_T/S_0$.  Note that $Z_t = \mathrm{e}^{qt}S_t/S_0$ is the date--$t$ value of the portfolio that starts with $1/S_0$ units of the asset (i.e., with a \$1 investment) and reinvests dividends.  Thus, the call options are call options on a dividend-reinvested portfolio with the same volatility as $S$ and initial price of \$1.  This implies that the date--0 value of the contract to the investor is $\mathrm{e}^{-rT}D$ plus 

$e^{-\alpha*T}*D*$`Black_Scholes_Call`$(1,e^{-\alpha*T},r,sigma,q,T)$



1. Create a Python function  to compute the fair expense ratio; i.e., find $\alpha$ such that the date--0 value of the contract is equal to $D$.  Hint:  Modify the

```Black_Scholes_Call_Implied_Vol``` 

function.  You can use $\alpha=0$ as a lower bound.  Because the value of the contract is decreasing as $\alpha$ increases, you can find an upper bound by iterating until the value of the contract is less than $D$.
2.  How does the fair expense ratio vary with the maturity $T$?  Why?



:::
::: Exercise
 Modify the function `Simulated_Delta_Hedge_Profit` to compute percentiles of gains and losses for an investor who writes a call option and constructs a delta and gamma hedge using the underlying asset and another call option. Include the exercise price of the call option used to hedge as an input, and assume it has the same time to maturity as the option that is written.  Hint:  In each period \verb!j = 1 to N-1!, the updated cash position can be calculated as

``` Cash = exp(r*dt)*Cash + a*S*(exp(q*dt)-1) - (Newa-a)*NewS - (Newb-b)*PriceHedge,```
where `a` denotes the number of shares of the stock held, `b` denotes the number of units held of the option that is used for hedging, and `PriceHedge` denotes the price of the option used for hedging (computed from the Black-Scholes formula each period).  This expression embodies the interest earned (paid) on the cash position, the dividends received on the shares of stock and the cash inflows (outflows) from adjusting the hedge.  At the final date `N`, the value of the hedge is

```exp(r*dt)*Cash + a*S*(exp(q*dt)-1) + a*NewS + b*np.max(NewS-KHedge,0),```

and the value of the overall portfolio is the value of the hedge less
```np.max(NewS-KWritten,0),```
where `KHedge` denotes the strike price of the option used to hedge and `KWritten` denotes the strike of the option that was written.
:::

