{{< include macros.qmd >}}

# American Options {#sec-c:americans} 

```{python}
#| eval: true
#| echo: false

import plotly
from IPython.display import display, HTML

plotly.offline.init_notebook_mode(connected=True)
display(
    HTML(
        '<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG"></script>'
    )
)
```
 

 ![](under_construction.jpg)


## Calls are Better Alive than Dead


## Binomial Valuation of American Options


## American Calls with Discrete Dividends {#sec-s:discrete}

It can be optimal to exercise an American call option early if the underlying asset pays a dividend.  The optimal exercise date will be immediately prior to the asset going ex-dividend.  Consider a call option maturing at $T'$ on an asset that will pay a known cash dividend $D$ at a known date $T<T'$.  We assume there is no continuous dividend payment, so $q=0$.  For simplicity, we assume that the date of the dividend payment is also the date that the asset goes ex-dividend; i.e., ownership of the asset at any date $t<T$ entitles the owner to receive the dividend at date $T$.  Under this assumption, it is reasonable also to assume that the stock price drops by $D$ when the dividend is paid.  

There is some ambiguity about how to define the asset price at the instant the dividend is paid---whether to include or exclude the dividend.  We will let $S_T$ denote the price including the dividend and denote the price excluding the dividend by $Z_T$, so $Z_T = S_T-D$.   In fact, it is convenient to let $Z_t$ denote the price stripped of the dividend value at all dates $t \leq T$, so we will define 
$$
Z_t = \begin{cases}S_t-\mathrm{e}^{-r(T-t)}D & \text{if $t \leq T$\;,}\\
S_t & \text{if $t > T$\;.}
\end{cases}
$$

Note that $Z$ is the price of the following dividend-reinvested portfolio: buy one unit of the asset at date $0$, borrow $\mathrm{e}^{-rT}D$ at date $0$ to help finance the purchase, and use the dividend $D$ at date $T$ to retire the debt.

If we assume as usual that the asset price $S$ has a constant volatility, then, using @eq-exponential1 for a geometric Brownian motion and letting $B^*$ denote a Brownian motion under the risk-neutral probability, we have
\begin{align*}
S_{T'} &= [S_T-D]\exp\left\{(r-\sigma^2/2)(T'-T)+\sigma B^*_{T'}-\sigma B^*_T\right\}\\
&= \left[S_0\exp\left\{(r-\sigma^2/2)T+\sigma B^*_T\right\}-D\right]\\
&\qquad \times \exp\left\{(r-\sigma^2/2)(T'-T)+\sigma B^*_{T'}-\sigma B^*_T\right\}\\
&=S_0\exp\left\{(r-\sigma^2/2)T'+\sigma B^*_{T'}\right\} \\
&\qquad - D\exp\left\{(r-\sigma^2/2)(T'-T)+\sigma B^*_{T'}-\sigma B^*_T\right\}\;.
\end{align*}
Thus, $S$ will be a sum of lognormal random variables.  A sum of lognormals is not itself lognormal, so $S$ will not be lognormal, and we are unable to calculate the option value in a simple way.

We will assume instead that $Z$ has a constant volatility $\sigma$.  Thus, $Z$ is the price of a dividend-reinvested portfolio, it satisfies the Black-Scholes assumptions, and we have $S_{T'}=Z_{T'}$.  To value a European option, we would simply use $Z_0=S_0-\mathrm{e}^{-rT}D$ as the initial asset price and $\sigma$ as the volatility.

### American Call Payoff
If the call is not exercised before the dividend is paid at date $T$, then its value at date $T$ will be
\begin{center}
`Black_Scholes_Call(Z,K,r,sigma,0,Tprime-T)`
\end{center}
where  `Z` $=Z_T$.  Hence, exercise is optimal when
\begin{center}
`Z` $+$ `D` $-$ `K` $>$ `Black_Scholes_Call(Z,K,r,sigma,0,Tprime-T)`\;.
\end{center}
A lower bound for the Black-Scholes call value on the right-hand side is $Z_T-\mathrm{e}^{-r(T'-T)}K$.  If $Z_T+D-K$ is less than or equal to this lower bound, then exercise cannot be optimal.  Thus, if $D-K$ is less than or equal to $-\mathrm{e}^{-r(T'-T)}K$, then exercise will never be optimal.  In this circumstance, the dividend is simply too small to offset the time value of money on the exercise price $K$,  and the value of the American call written on the asset with price $S$ is the same as the value of the European call written on the dividend-reinvested portfolio with price $Z$.  

On the other hand, if $D-K > -\mathrm{e}^{-r(T'-T)}K$, then exercise will be optimal for sufficiently large $Z_T$.  In this case, there is some
$Z^*$ such that the owner of the call will be indifferent about exercise, and exercise will be optimal for \vfil\eject
all $Z_T>Z^*$.  This $Z^*$ is defined by
\begin{center}
`Z*` $+$ `D` $-$ `K` $=$ `Black_Scholes_Call(Z*,K,r,sigma,0,Tprime-T)`\;.
\end{center}
As in the previous section, we can compute $Z^*$ by bisection.  

Define
\begin{align*}
x&= \begin{cases} 1 &\text{if $Z_T>Z^*$\;,}\\
                               0 & \text{otherwise\;,}
        \end{cases}\\
y&= \begin{cases} 1 &\text{if $Z_T\leq Z^*$ and $Z_{T'}>K$\;,}\\
                               0 & \text{otherwise\;.}
        \end{cases} 
\end{align*} 
Then the American call option will pay $[Z_T+D-K]x$ at date $T$ (due to early exercise) and $[Z_{T'}-K]y$ at date $T'$ (due to exercise at maturity), if $D-K > -\mathrm{e}^{-r(T'-T)}K$.  

### Numeraires
Assume for now that $D-K > -\mathrm{e}^{-r(T'-T)}K$.  The payoff $(D-K)x$ is the payoff of $D-K$ digital options maturing at $T$, and the payoff $Z_Tx$ is the payoff of one share digital on the portfolio with price $Z$.  Therefore, the value of receiving  $[Z_T+D-K]x$ at date $T$ is
$$
Z_0\mathrm{N}(d_1) + \mathrm{e}^{-rT}(D-K)\mathrm{N}(d_2)\; ,
$$
where


$$
d_1 = \frac{\log\left(\frac{Z_0}{Z^*}\right)+\left(r+\frac{1}{2}\sigma^2\right)T}{\sigma\sqrt{T}}
$$
$$
= \frac{\log\left(\frac{S_0-\mathrm{e}^{-rT}D}{Z^*}\right)+\left(r+\frac{1}{2}\sigma^2\right)T}{\sigma\sqrt{T}} \;,
$$ {#eq-americancalld1star}

$$
d_2=d_1-\sigma\sqrt{T}\;.
$$ {#eq-americancalld2star}


As in the previous section,^[The only difference is that here $Z$ is the price of a dividend-reinvested portfolio, so, in the notation of the previous section, we have $V_t=Z_t$.] the value of receiving $[Z_T-K]y$ at date $T'$ is 
$$
Z_0\times \text{prob}^Z(y=1) - \mathrm{e}^{-rT'}K\times \text{prob}^R(y=1)\; .
$$
### Calculating Probabilities
The calculations are very similar to the calculations we did for a call option on a call.  In fact, they are exactly the same as we would do for a put option on a call.


1. The event $y=1$ is equivalent to
$$
\log Z_0 + \left(r+\frac{1}{2}\sigma^2\right)T+\sigma B^*_T \leq \log Z^*
$$
and
$$
\log Z_0 + \left(r+\frac{1}{2}\sigma^2\right)T'+\sigma B^*_{T'} > \log K\; ,
$$

where $B^*$ is a Brownian motion when the underlying asset (with price $Z$) is used as the numeraire. 
We can write this as
$$
\frac{B^*_T}{\sqrt{T}}<-d_1 \quad \text{and} \quad - \frac{B^*_{T'}}{\sqrt{T'}} < d_1'\;,
$$ {#eq-new100}

where $d_1$ is defined in @eq-americancalld1star,


$$
d_1' = \frac{\log\left(\frac{Z_0}{K}\right)+\left(r+\frac{1}{2}\sigma^2\right)T'}{\sigma\sqrt{T'}}
$$
$$
= \frac{\log\left(\frac{S_0-\mathrm{e}^{-rT}D}{K}\right)+\left(r+\frac{1}{2}\sigma^2\right)T'}{\sigma\sqrt{T'}}
$$ {#eq-americancalld1}

$$
d_2'=d_1'-\sigma\sqrt{T'}\;.
$$ {#eq-americancalld2}


The two standard normal variables on the left-hand sides in @eq-new100 have a covariance equal to
$$
-\frac{1}{\sqrt{TT'}}\mathrm{cov}(B_T,B_{T'}) = -\frac{1}{\sqrt{TT'}}\mathrm{cov}(B_T,B_T) = -\sqrt{\frac{T}{T'}}\; .
$$

Hence, $\text{prob}^Z(y=1)$ is the probability that $a\leq -d_1$ and $b\leq d_1'$, where $a$ and $b$ are standard normal random variables with covariance (= correlation coefficient) of $-\sqrt{T/T'}$.  We are writing this probability as $\mathrm{M}\!\left(-d_1,d_1',-\sqrt{T/T'}\right)$.  

2. The calculation for $\text{prob}^R(y=1)$ is similar.  The event $y=1$
is equivalent to
$$
\log Z_0 + \left(r+\frac{1}{2}\sigma^2\right)T+\sigma B^*_T \leq \log Z^*
$$
and
$$
\log Z_0 + \left(r+\frac{1}{2}\sigma^2\right)T'+\sigma B^*_{T'} > \log K\; ,
$$
where $B^*$ now denotes a Brownian motion under the risk-neutral probability.  These are equivalent to
$$
\frac{B^*_T}{\sqrt{T}}\leq -d_2 \quad \text{and} \quad - \frac{B^*_{T'}}{\sqrt{T'}} < d_2'\;.
$$ {#eq-new11}

Hence, $\text{prob}^R(y=1)=\mathrm{M}\!\left(-d_2,d_2',-\sqrt{T/T'}\right)$.  



### American Call Pricing Formula


::: Rule
## 
Under our assumptions, the value of an American call option maturing at $T'$ with a dividend payment of $D$ at date $T<T'$ is as follows.  
If 
$$
D-K \leq -\mathrm{e}^{-r(T'-T)}K\;,
$$
then the value of the call is given by the Black-Scholes formula
$$
[S_0-\mathrm{e}^{-rT}D]\mathrm{N}(d_1')-\mathrm{e}^{-rT}K\mathrm{N}(d_2')\; ,
$$

where $d_1'$ and $d_2'$ are defined in @eq-americancalld1 - @eq-americancalld2.
On the other hand, if 
$$
D-K > -\mathrm{e}^{-r(T'-T)}K\;,
$$
then the value of the call is

$$
\begin{multline}
[S_0-\mathrm{e}^{-rT}D]\mathrm{N}(d_1) + \mathrm{e}^{-rT}(D-K)\mathrm{N}(d_2)\\ +[S_0-\mathrm{e}^{-rT}D]\mathrm{M}\!\left(-d_1,d_1',-\sqrt{T/T'}\right) \\- \mathrm{e}^{-rT'}K\mathrm{M}\!\left(-d_2,d_2',-\sqrt{T/T'}\right)\;,
\end{multline} 
$$ {#eq-americancall}

where $d_1$ and $d_2$ are defined in @eq-americancalld1star - @eq-americancalld2star and $d_1'$ and $d_2'$ are defined in @eq-americancalld1 - @eq-americancalld2.
:::

To value an American call when there is one dividend payment before the option matures, we input the initial asset price $S_0$ and then compute $Z_0=X_0-\mathrm{e}^{-rT}D$.  If $D-K \leq -\mathrm{e}^{-r(T'-T)}K$, we return the Black-Scholes value of a European call written on $Z$.  Otherwise, we need to compute $Z^*$ and our bisection algorithm requires an upper bound for $Z^*$, which would be any value of $Z_T$ such that exercise at $T$ is optimal.  It is not obvious what this should be, so we start with $K$ and keep doubling this until we obtain a value of $Z_T$ at which exercise would be optimal.  Then, we use the bisection algorithm to compute $Z^*$ and finally compute the option value @eq-americancall.

```{python}

#| code-fold: true
#| label: American_Call_Dividend
"""
import numpy as np

import numpy as np
from scipy.stats import norm
import scipy.optimize as optimize

def black_scholes_call(S, K, r, sigma, q, T):
"""
"""
    Inputs:
    S = initial stock price
    K = strike price
    r = risk-free rate
    sigma = volatility
    q = dividend yield
    T = time to maturity
"""
"""
    if sigma == 0:
        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)
    else:
        d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
        d2 = d1 - sigma * np.sqrt(T)
        N1 = norm.cdf(d1)
        N2 = norm.cdf(d2)
        return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2


def american_call_dividend(S, K, r, sigma, Div, TDiv, TCall):
    LessDiv = S - np.exp(-r * TDiv) * Div
    if Div / K <= 1 - np.exp(-r * (TCall - TDiv)):
        return black_scholes_call(LessDiv, K, r, sigma, 0, TCall)

    upper = K
    while upper + Div - K < black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv):
        upper *= 2

    tol = 1e-6
    lower = 0
    flower = Div - K
    fupper = upper + Div - K - black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv)
    guess = 0.5 * lower + 0.5 * upper
    fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)
    while upper - lower > tol:
        if fupper * fguess < 0:
            lower = guess
            flower = fguess
            guess = 0.5 * lower + 0.5 * upper
            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)
        else:
            upper = guess
            fupper = fguess
            guess = 0.5 * lower + 0.5 * upper
            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)
    LessDivStar = guess

    d1 = (np.log(LessDiv / LessDivStar) + (r + sigma ** 2 / 2) * TDiv) / (sigma * np.sqrt(TDiv))
    d2 = d1 - sigma * np.sqrt(TDiv)
    d1prime = (np.log(LessDiv / K) + (r + sigma ** 2 / 2) * TCall) / (sigma * np.sqrt(TCall))
    d2prime = d1prime - sigma * np.sqrt(TCall)
    rho = -np.sqrt(TDiv / TCall)
    N1 = norm.cdf(d1)
    N2 = norm.cdf(d2)
    M1 = binormal_prob(-d1, d1prime, rho)
    M2 = binormal_prob(-d2, d2prime, rho)

    return LessDiv * N1 + np.exp(-r * TDiv) * (Div - K) * N2 + LessDiv * M1 - np.exp(-r * TCall) * K * M2

# Example usage

S = 100
K = 90
r = 0.05
sigma = 0.2
Div = 5
TDiv = 0.5
TCall = 1
N = 10

print("American Call with Dividend:", american_call_dividend(S, K, r, sigma, Div, TDiv, TCall))
"""
```


