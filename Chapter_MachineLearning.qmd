{{< include macros.qmd >}}

# Machine Learning {#sec-c:machinelearning} 

```{python}
#| eval: true
#| echo: false

import plotly
from IPython.display import display, HTML

plotly.offline.init_notebook_mode(connected=True)
display(
    HTML(
        '<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG"></script>'
    )
)
```




## Latex 

Trying to get latex to work. Still works
test commit 2/25 ~Austin

```{python}
#| eval: true
#| echo: false

import plotly
from IPython.display import display, HTML

plotly.offline.init_notebook_mode(connected=True)
display(HTML(
    '<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG"></script>'
))
```


```{python}
#| output: true


import numpy as np
import plotly.graph_objects as go

mu = 1
sigma = 1
t = 1

# Brownian path
n = 1000   
dt = t/n
dB = np.random.normal(scale = np.sqrt(dt), size=n)
B = np.zeros(n+1)
B[1:] = np.cumsum(dB)

# Brownian path with discrete steps
n_discrete = 10
Delta_t = t/n_discrete
B_discrete = B[::int(n/n_discrete)]
DeltaB = np.diff(B_discrete)

# X in discrete-time 
X1 = np.ones(n_discrete+1)
for i in range(1, n_discrete+1):
    X1[i] = X1[i-1] + mu * X1[i-1] * Delta_t + sigma * X1[i-1] * DeltaB[i-1]

# Continuous-time
X2 = np.exp((mu - 0.5 * sigma**2) * np.arange(0, t+dt, dt) + sigma * B)

fig = go.Figure()
fig.add_trace(
    go.Scatter(
        x=np.arange(0, t+Delta_t, Delta_t), 
        y=X1, 
        mode='lines+markers', 
        line={'shape': 'spline', 'smoothing': 0},
        name=r'$X_{ti}-X_{ti-1}$',
        hovertemplate='t = %{x:.2f}<br>B = %{y:.2f}<extra></extra>'  # 
    )
)

fig.add_trace(
    go.Scatter(
        x=np.arange(0, t+dt, dt), 
        y=X2, 
        mode='lines', 
        name=r'$dX_t$',
        hovertemplate='t = %{x:.2f}<br>B = %{y:.2f}<extra></extra>'  # 
    )
)
fig.update_layout(
    showlegend=True,
    xaxis_title='Time',
    yaxis_title='',
    template='plotly_white',
    height=300,
    width=450,
    legend=dict(
        x=0.1,
        y=1,
        xanchor="left",
        yanchor="top",
    )
)

fig.show()
```


![](under_construction.jpg)