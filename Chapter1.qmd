# Introduction to Options {#sec-c_calls-puts}

<a target="_blank" href="https://colab.research.google.com/github/math-finance-book/notebooks/blob/main/chapter1.ipynb">
  <img src="images/Open in Colab.png" alt="Open Chapter Code In Colab" width="200" height="34"/>
</a>  

Financial options are rights to buy and sell assets at pre-specified prices.  The rights are traded on exchanges and also as private contracts (called over-the-counter or OTC).  A call option is a right to buy an asset.  A put option is a right to sell an asset.  The pre-specified price is called the exercise price, the strike price, or simply the strike.   The asset to which an option pertains is called the underlying asset, or, more briefly, the underlying.  

Here is a snapshot of market statistics regarding call options on Apple stock (AAPL) traded on the Chicago Board Options Exchange (CBOE).  We are accessing the data courtesy of Yahoo Finance.  We will refer to this data throughout the chapter.

```{python}
#| execute: auto

import pandas as pd
import yfinance as yf
from datetime import datetime
import pytz
from datetime import datetime

est = pytz.timezone('US/Eastern')
fmt = '%Y-%m-%d %H:%M:%S %Z%z'
now = datetime.today().astimezone(est).strftime(fmt)

ticker = "AAPL"         # ticker to pull
kind = "call"           # call or put
maturity = 4            # option maturity in order of maturities trading

tick = yf.Ticker(ticker.upper())

# Pull last stock price
close = tick.history().iloc[-1].Close

# Get maturity date
date = tick.options[maturity]

# Pull options data
df = (
    tick.option_chain(date).calls
    if kind == "call"
    else tick.option_chain(date).puts
)

df.lastTradeDate = df.lastTradeDate.map(
    lambda x: x.astimezone(est).strftime(fmt)
)

# Formatting
cols = [
    "strike",
    "bid",
    "ask",
    "lastPrice",
    "change",
    "percentChange",
    "lastTradeDate",
    "volume",
    "openInterest",
    "impliedVolatility",
]
df = df[cols]
df["impliedVolatility"] = df["impliedVolatility"].map("{:.1%}".format)
df["change"] = df["change"].round(2)
df["percentChange"] = (df["percentChange"]/100).map("{:.1%}".format)
df.columns = [
    "Strike",
    "Bid",
    "Ask",
    "Last Price",
    "Change",
    "% Change",
    "Time of Last Trade",
    "Volume",
    "Open Interest",
    "Implied Volatility",
] 
df = df.set_index("Strike")
print(f"Code was executed at \t{now}")
print(f"Last {ticker.upper()} price was \t${close:.2f}.")
print(f'Maturity date of options:\t{date}')
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
print(df)
```


![](images/under_construction.png){fig-align="center"}

## Intrinsic Value and Time Value


## Investing in Options


## Hedging with Options


## Selling Options for Income


## Option Spreads


## Put-Call Parity


## American Options


## Dividends

