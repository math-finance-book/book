{
  "hash": "5997f1ef6712f396b962d5271e9592fa",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n\n# Delta Hedges and PDEs {#sec-c:pdes} \n\n::: {#cf4bc398 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG\"></script>\n```\n:::\n:::\n\n\n## Example: Replicating Portfolios and Simulating Portfolio Insurance\n\nAnother derivation of the Black Scholes formula is provided by Merton.  He asked  whether the payoff to a European call option can be replicated by trading the stock and the risk free asset.  Let $\\theta_t$ be the number of shares of the stock held at time $t$ and $\\alpha_t$ the number of shares of an initial investment of one dollar in the risk free asset.   Then the portfolio is worth $\\alpha_t R_t + \\theta_t S_t$ where $R_t= e^{rt}$ is the time $t$ value of an initial time $0$ investment of one dollar in the risk free asset. The portfolio should start with an initial value, should not have any cash inflows or outflows and have a terminal value equal to a call payoff so the changes in value are completely dictated by the changes in the value of the assets.  That is, assuming continuous trading,\n$$  d W_t = \\theta_t d S_t + \\alpha_t  d R_t = \\theta_t \\left(\\mu S_t dt + q S_t dt + \\sigma S_t d B_t\\right)  + \\alpha_t r R_t dt$$\nwith terminal condition \n$$ W_T = \\alpha_T R_T + \\theta_T S_T = (S_T - K)^{+} $$\nThe problem is to find $\\theta_t$ and $\\alpha_t$ for all times and states.  If we can accomplish this, then by `no-arbitrage' the call price must be the value of the initial investment.  Assume the call price is a function of the stock price and time: $C(t,S_t)$.  Then by Ito's Lemma\n$$ d C(t,S_t) = \\left(\\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (\\mu-q) S_t + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2 \\right) dt + \\frac{\\partial C}{\\partial S} \\sigma S_t dB_t $$\nIt should be apparent that we want to hold $\\theta = \\frac{\\partial C}{\\partial S}$, which is the delta of the call option.  By doing so, we match the diffusion term in thw change in wealth and the change in the call option.  Then matching the drift terms in both expressions\n$$ \\frac{\\partial C}{\\partial S} \\mu S_t + \\alpha_t r R_t = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (\\mu-q) S_t + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwhich can be solved to give\n$$ \\alpha_t r R_t=r \\left(W_t -\\frac{\\partial C}{\\partial S} S_t\\right)  = \\frac{\\partial C}{\\partial t}-\\frac{\\partial C}{\\partial S} q S_t  + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwhich gives the equation\n$$r W_t = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S}(r-q) S_t+\\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwith a boundary condition $W_T = (S_T-K)^{+}$.  However, no-arbitrage suggests $W_t = C(t,S_t)$ which gives us the partial differential equation\n$$r C = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (r-q) S+\\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S^2$$\nwith a boundary condition $C(T,S_T)= (S_T - K)^{+}$.  This is a partial differential equation and a fairly tedious set of calcuations show the Black Scholes formula is a solution (in fact it is the only positive solution).  Close observation of the right hand side we see this is the drift term of Ito expansion for $C$ if we work in the risk-neutral probability.  The right hand side then says in the risk-neutral probability, the call option earns the risk free return.\n\nHowever, there is nothing special about a call option.  The same argument will apply for any European style option.  The only difference is the boundary condition.  This procedure allows us to replicate the payoff of any European option even for those which might not be traded.  This observation had a profound effect on practice.  A particularly popular example is portfolio insurance.\n\nRecall, that a protective put position buys a put and buys a share and the payoff at the expiration of the put is given by $\\max(K,S_T)$.  The reason for the name protective put is apparent since the position can pay off no less than $K$.  The cost of this insurance is the price of the put.  However, if the put is not traded, we can synthetically replicate this payoff using the prodedure above assuming we can trade continuously.  The basic recipe is to start with inital wealth equal to that for a protective put position: $W_0 = P(0,S_0)+S_0$.  The delta of the protective put position can be calcuated to be the delta of the put plus 1 which is $N(d_1)$, where $d_1$ is calculated at each point in time.  However, in practice we cannot trade continuously.  A simple discrete strategy would rebalance at intervals $\\Delta t$.  The strategy calculates $N(d_1)$ at time 0 and holds $P(0,S_0)+S_0 - N(d_1)S_0$ dollars in the risk free asset and $N(d_1)$ shares of the asset.  Thereafter these holdings are adjusted.  The change in portfolio value over the interval $\\Delta t$ is \n$$\\Delta W= W_{i \\Delta t}- W_{(i-1)\\Delta t} $$\n$$ \n= (P((i-1)\\Delta t,S_{(i-1)\\Delta t})+S_{(i-1)\\Delta t} - N(d_1-)S_{(i-1)\\Delta t})(R_{i\\Delta t}-R_{(i-1)\\Delta t}) + N(d1-)(S_{i\\Delta t}-S_{(i-1)\\Delta t}) \n$$\nwhere $N(d1-)$ is the delta chosen at time $(i-1)\\Delta t$.  The question is if the Black Scoles model is correct, how accurate can a discrete rebalancing scheme be?  This is simulated in the following code:\n\n![](under_construction.jpg)\n\n",
    "supporting": [
      "Chapter_Deltas_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}