{
  "hash": "b758b4687362cacb35f6e053165927e7",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n\n# Introduction\nThe binomial tree model is a discrete-time framework used to price derivative securities. It is widely used in financial engineering for valuing options and other contingent claims. This model is particularly useful because it provides an intuitive approach to pricing and allows for easy incorporation of various features such as early exercise in American options.\n\n## Basics of the Binomial Tree Model\nThe binomial tree model is based on the assumption that, over a small time step, the price of an underlying asset can move up or down by a certain factor. The model is constructed iteratively to estimate the fair value of derivatives such as options.\n\nAn $n$ period binomial tree model can be described as follows:\n\n1. There are $n+1$ time points with $t=0, \\Delta t, 2 \\Delta t, ..., n\\Delta t$, where $\\Delta t$ is the time step.\n\n2. At each time point $t$, the price of the underlying asset either goes up by a factor $u_t>1$ with probability $p_t\\in(0,1)$ or goes down by a factor $d_t<1$ with probability $1-p_t$.\n\n3. Given an initial stock price $S_0$,  the price of the underlying asset evolves as:\n\n$$\nS_{t+\\Delta t} = S_t \\times u_t \\quad \\text{(up move)}\n$$\nor\n$$\nS_{t+\\Delta t} = S_t \\times d_t \\quad \\text{(down move)}\n$$\n\n4. The absence of arbitrage ensures the model can be solved using risk-neutral valuation, where the risk-neutral probability of an up move is:\n\n$$\np_t = \\frac{e^{r_t \\Delta t} - d_t}{u_t - d_t}\n$$\n\nwhere $ r_t $ is the risk-free rate from $t$ to $t+\\Delta t$.\n\n### Example: Three-Period Recombining Binomial Tree\nThis is an example of a three-period recombining binomial tree: $n=3$, $u=1.1$, $d=1/u$, $\\Delta t=1$:\n\n::: {#fb69bc93 .cell execution_count=1}\n``` {.python .cell-code}\nimport plotly.graph_objects as go\n\ndef plot_symmetric_binomial_tree(S0=100, u=1.1):\n    d = 1 / u  # Down factor\n    periods = 3  # Number of periods\n\n    # Define nodes with symmetric positioning\n    nodes = {}\n    for t in range(periods + 1):\n        for j in range(t + 1):\n            x = t  # Time step on x-axis\n            y = 2 * j - t  # Centered y-axis positioning for symmetry\n            nodes[(x, y)] = round(S0 * (u ** j) * (d ** (t - j)), 2)\n\n    # Define edges\n    edges = []\n    for t in range(periods):\n        for j in range(t + 1):\n            x = t\n            y = 2 * j - t\n            edges.append(((x, y), (x + 1, y + 1)))  # Up move\n            edges.append(((x, y), (x + 1, y - 1)))  # Down move\n\n    fig = go.Figure()\n\n    # Add edges to the plot\n    for edge in edges:\n        x_coords = [edge[0][0], edge[1][0]]\n        y_coords = [edge[0][1], edge[1][1]]\n        fig.add_trace(go.Scatter(x=x_coords, y=y_coords, mode='lines', line=dict(color='black'), showlegend=False))\n\n    # Add nodes to the plot\n    x_vals = [key[0] for key in nodes.keys()]\n    y_vals = [key[1] for key in nodes.keys()]\n    labels = [str(nodes[key]) for key in nodes.keys()]\n\n    fig.add_trace(go.Scatter(\n        x=x_vals, y=y_vals, mode='markers+text',\n        marker=dict(size=20, color='lightblue'),\n        text=labels, textposition=\"top center\",\n        showlegend=False\n    ))\n\n    fig.update_layout(\n        title=\"3-Period Symmetric Binomial Tree (u=1.1, d=1/u)\",\n        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        plot_bgcolor='white',\n        width=700,\n        height=500\n    )\n\n    fig.show()\n\nplot_symmetric_binomial_tree()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        </script>\n        <script type=\"module\">import \"https://cdn.plot.ly/plotly-3.0.0.min\"</script>\n        \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-3.0.0.min.js\"></script>                <div id=\"9e2712de-5e2d-4529-9c13-a99af953f11e\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"></div>            <script type=\"text/javascript\">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById(\"9e2712de-5e2d-4529-9c13-a99af953f11e\")) {                    Plotly.newPlot(                        \"9e2712de-5e2d-4529-9c13-a99af953f11e\",                        [{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0,1],\"y\":[0,1],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0,1],\"y\":[0,-1],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[-1,0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[-1,-2],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[1,2],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[1,0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-2,-1],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-2,-3],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[0,1],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[0,-1],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[2,3],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[2,1],\"type\":\"scatter\"},{\"marker\":{\"color\":\"lightblue\",\"size\":20},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"100.0\",\"90.91\",\"110.0\",\"82.64\",\"100.0\",\"121.0\",\"75.13\",\"90.91\",\"110.0\",\"133.1\"],\"textposition\":\"top center\",\"x\":[0,1,1,2,2,2,3,3,3,3],\"y\":[0,-1,1,-2,0,2,-3,-1,1,3],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermap\":[{\"type\":\"scattermap\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"title\":{\"text\":\"3-Period Symmetric Binomial Tree (u=1.1, d=1\\u002fu)\"},\"plot_bgcolor\":\"white\",\"width\":700,\"height\":500},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('9e2712de-5e2d-4529-9c13-a99af953f11e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };            </script>        </div>\n```\n:::\n:::\n\n\n::: {#ade234ac .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ndef plot_symmetric_binomial_tree(S0=100, u=1.1, vertical_scale=0.5, title_pad=20):\n    \"\"\"\n    Plots a 3-period symmetric binomial tree using Matplotlib,\n    with options to compress the vertical spacing and add space between the title and the plot.\n\n    :param S0: initial stock price\n    :param u: up factor\n    :param vertical_scale: compresses or expands the vertical spacing\n    :param title_pad: extra spacing between the title and the tree (in points)\n    \"\"\"\n    d = 1 / u  # Down factor\n    periods = 3  # Number of periods\n\n    # Define nodes with symmetric positioning\n    nodes = {}\n    for t in range(periods + 1):\n        for j in range(t + 1):\n            x = t\n            y = vertical_scale * (2 * j - t)  # scale the vertical distance\n            nodes[(x, y)] = round(S0 * (u**j) * (d**(t - j)), 2)\n\n    # Define edges\n    edges = []\n    for t in range(periods):\n        for j in range(t + 1):\n            x = t\n            y = vertical_scale * (2 * j - t)\n            # Up move\n            edges.append(((x, y), (x + 1, y + vertical_scale)))\n            # Down move\n            edges.append(((x, y), (x + 1, y - vertical_scale)))\n\n    # Create a Matplotlib figure\n    fig, ax = plt.subplots(figsize=(7, 5))\n\n    # Plot edges\n    for edge in edges:\n        x_coords = [edge[0][0], edge[1][0]]\n        y_coords = [edge[0][1], edge[1][1]]\n        ax.plot(x_coords, y_coords, color='black')\n\n    # Plot nodes\n    x_vals = [k[0] for k in nodes.keys()]\n    y_vals = [k[1] for k in nodes.keys()]\n    labels = [str(nodes[k]) for k in nodes.keys()]\n    ax.scatter(x_vals, y_vals, s=300, color='lightblue')\n\n    # Add text labels above each node\n    for x, y, label in zip(x_vals, y_vals, labels):\n        ax.text(x, y + 0.3 * vertical_scale, label, ha='center', va='bottom')\n\n    # Title with extra spacing set by 'pad'\n    ax.set_title(\n        f\"3-Period Symmetric Binomial Tree (u={u}, d={round(d,2)})\",\n        pad=title_pad\n    )\n\n    # Style the plot\n    ax.axis(\"equal\")\n    ax.axis(\"off\")\n\n    plt.show()\n\n# Example usage: extra spacing of 20 points between the caption and the tree\nplot_symmetric_binomial_tree(vertical_scale=0.5, title_pad=20)\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Chapter_Intro_Binomial_Tree_files/figure-html/cell-3-output-1.png){width=540 height=427}\n:::\n:::\n\n\n## A Generalized $n$-Period Tree\n\nWe can generalize the above basic binomial tree to a more general one where each node at any time $t$ can have a variable number of branches and the branching pattern can vary across both time steps and nodes. This flexible structure can be useful for pricing more complex derivative securities. \n\n### Definition of a Generalized $n$-period tree\n\n#### 1. Tree Structure\n\nWe define the tree as a **directed graph** $T = (N, E)$, where:\n\n- $N$ is the set of **nodes**.\n- $E \\subseteq N \\times N$ is the set of **edges**, representing transitions between nodes across periods.\n\nEach node is indexed by:\n\n$$\nN_{t,i}, \\quad t = 0, 1, \\dots, n, \\quad i = 1, \\dots, |N_t|\n$$\n\nwhere:\n\n- $t$ represents the time point,\n- $i$ represents the node index at time $t$,\n- $|N_t|$ denotes the number of nodes at time $t$.\n\n---\n\n#### 2. Variable Branching\n\nEach node $N_{t,i}$ has $B_{t,i}$ branches, which represents the number of children (next-period nodes) it connects to. The total number of nodes at time $t+1$ is then:\n\n$$\n|N_{t+1}| = \\sum_{i=1}^{|N_t|} B_{t,i}\n$$\n\nEach **edge** represents a **transition probability** $P_{t,i,j}$ from node $N_{t,i}$ at time $t$ to node $N_{t+1, j}$ at time $t+1$, satisfying:\n\n$$\n\\sum_{j=1}^{B_{t,i}} P_{t,i,j} = 1, \\quad \\forall i, t\n$$\n\nwhere $P_{t,i,j}$ is the probability of transitioning from $N_{t,i}$ to $N_{t+1,j}$.\n\n---\n\n#### 3. Node Values and Transition Rule\n\nEach node has a value $S_{t,i}$, which can represent an evolving variable (e.g., stock price, state variable). The **value transition function** is defined as:\n\n$$\nS_{t+1,j} = f(S_{t,i}, a_{t,i,j})\n$$\n\nwhere:\n\n- $S_{t,i}$ is the value at node $N_{t,i}$,\n- $a_{t,i,j}$ is a transition factor specific to the branch from $N_{t,i}$ to $N_{t+1,j}$,\n- $f$ is a value update function, often modeled as:\n  $$\n  S_{t+1,j} = S_{t,i} \\times a_{t,i,j}\n  $$\n\n\n**Example**: Consider a 3-period tree with variable branching:\n\n- **Period 0**: 1 node ($B_{0,1} = 2$)\n- **Period 1**: 2 nodes, each with different branching ($B_{1,1} = 3, B_{1,2} = 2$)\n- **Period 2**: 5 nodes, each branching further ($B_{2,1} = 2, B_{2,2} = 2, B_{2,3} = 1, B_{2,4} = 3, B_{2,5} = 2$).\n\nThe node count evolves as:\n\n$$\n|N_1| = B_{0,1} = 2, \\quad\n|N_2| = B_{1,1} + B_{1,2} = 3 + 2 = 5, \\quad\n|N_3| = 2 + 2 + 1 + 3 + 2 = 10\n$$\n\nThus, a generalized tree dynamically adjusts the branching structure.\n\n\n**Special Cases**\n\n- Binomial Tree ($B_{t,i} = 2$): Each node has exactly two branches, leading to an up/down model.\n- Trinomial Tree ($B_{t,i} = 3$): Each node has three possible transitions (e.g., up, middle, down).\n- Adaptive Trees: $B_{t,i}$ can depend on volatility or other dynamic parameters.\n\n\n### A Graphical Illustration of a Generalized 3-Period Tree\n\nHere is a 3-period example with variable branching:\n\n::: {#f8f89fdf .cell execution_count=3}\n``` {.python .cell-code}\nimport plotly.graph_objects as go\nfrom collections import defaultdict\n\ndef plot_variable_branching_tree_symmetric():\n    # 1. Build tree nodes/edges\n    nodes = {(0, 0): 100}  # Root node at time t=0, index=0 => value=100\n    edges = []\n\n    # next_index[t] tracks how many nodes have been created at period t so far\n    next_index = defaultdict(int)\n    next_index[0] = 1  # We have 1 node at t=0\n\n    # transitions[(t, i)] = list of factors for each branch out of node (t, i)\n    transitions = {\n        (0, 0): [1.1, 0.9],       # At t=0, i=0 => 2 branches\n        (1, 0): [1.2, 1.0, 0.8],  # At t=1, i=0 => 3 branches\n        (1, 1): [1.1, 0.85],      # At t=1, i=1 => 2 branches\n        (2, 0): [1.3, 0.9],       # At t=2, i=0 => 2 branches\n        (2, 1): [1.2, 1.0],       # At t=2, i=1 => 2 branches\n        (2, 2): [1.1],            # At t=2, i=2 => 1 branch\n        (2, 3): [1.15, 0.95, 0.85], # t=2, i=3 => 3 branches\n        (2, 4): [1.1, 0.9]        # t=2, i=4 => 2 branches\n    }\n\n    # Create nodes/edges\n    for (t, i), factors in transitions.items():\n        base_value = nodes[(t, i)]\n        for factor in factors:\n            child_t = t + 1\n            child_i = next_index[child_t]\n            next_index[child_t] += 1\n\n            child_value = round(base_value * factor, 2)\n            nodes[(child_t, child_i)] = child_value\n\n            edges.append(((t, i), (child_t, child_i)))\n\n    # 2. Count how many nodes per period => assign symmetrical y-coordinates\n    nodes_in_period = defaultdict(list)\n    for (t, i), val in nodes.items():\n        nodes_in_period[t].append(i)\n\n    # For each period t, sort node indexes, then map them to symmetrical positions around 0\n    coords = {}  # coords[(t, i)] = y_position\n    for t in sorted(nodes_in_period.keys()):\n        node_list = sorted(nodes_in_period[t])\n        count = len(node_list)\n\n        # We'll assign positions from 0..(count-1), then shift so center is 0\n        for idx, node_i in enumerate(node_list):\n            # E.g., if count=5, positions -> 0,1,2,3,4 => shift by -2 => -2,-1,0,1,2\n            shift = -(count - 1) / 2\n            y = idx + shift\n            coords[(t, node_i)] = y\n\n    # 3. Build the plot\n    fig = go.Figure()\n\n    # Add edges\n    for ((t1, i1), (t2, i2)) in edges:\n        x_coords = [t1, t2]\n        y_coords = [coords[(t1, i1)], coords[(t2, i2)]]\n        fig.add_trace(go.Scatter(\n            x=x_coords,\n            y=y_coords,\n            mode='lines',\n            line=dict(color='black'),\n            showlegend=False\n        ))\n\n    # Add nodes (markers+text)\n    for (t, i), val in nodes.items():\n        fig.add_trace(go.Scatter(\n            x=[t],\n            y=[coords[(t, i)]],\n            mode='markers+text',\n            marker=dict(size=10, color='blue'),\n            text=[str(val)],\n            textposition='top center',\n            showlegend=False\n        ))\n\n    fig.update_layout(\n        title=\"3-Period Variable Branching Tree (Symmetric Layout)\",\n        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n        width=900,\n        height=600,\n        plot_bgcolor='white'\n    )\n\n    fig.show()\n\n# Call the plotting function\nplot_variable_branching_tree_symmetric()\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-3.0.0.min.js\"></script>                <div id=\"ec27ddb5-d578-4395-85d3-3d41ba61f70d\" class=\"plotly-graph-div\" style=\"height:600px; width:900px;\"></div>            <script type=\"text/javascript\">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById(\"ec27ddb5-d578-4395-85d3-3d41ba61f70d\")) {                    Plotly.newPlot(                        \"ec27ddb5-d578-4395-85d3-3d41ba61f70d\",                        [{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0,1],\"y\":[0.0,-0.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[0,1],\"y\":[0.0,0.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[-0.5,-2.0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[-0.5,-1.0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[-0.5,0.0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[0.5,1.0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[1,2],\"y\":[0.5,2.0],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-2.0,-4.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-2.0,-3.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-1.0,-2.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[-1.0,-1.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[0.0,-0.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[1.0,0.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[1.0,1.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[1.0,2.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[2.0,3.5],\"type\":\"scatter\"},{\"line\":{\"color\":\"black\"},\"mode\":\"lines\",\"showlegend\":false,\"x\":[2,3],\"y\":[2.0,4.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"100\"],\"textposition\":\"top center\",\"x\":[0],\"y\":[0.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"110.0\"],\"textposition\":\"top center\",\"x\":[1],\"y\":[-0.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"90.0\"],\"textposition\":\"top center\",\"x\":[1],\"y\":[0.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"132.0\"],\"textposition\":\"top center\",\"x\":[2],\"y\":[-2.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"110.0\"],\"textposition\":\"top center\",\"x\":[2],\"y\":[-1.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"88.0\"],\"textposition\":\"top center\",\"x\":[2],\"y\":[0.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"99.0\"],\"textposition\":\"top center\",\"x\":[2],\"y\":[1.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"76.5\"],\"textposition\":\"top center\",\"x\":[2],\"y\":[2.0],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"171.6\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[-4.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"118.8\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[-3.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"132.0\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[-2.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"110.0\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[-1.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"96.8\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[-0.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"113.85\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[0.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"94.05\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[1.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"84.15\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[2.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"84.15\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[3.5],\"type\":\"scatter\"},{\"marker\":{\"color\":\"blue\",\"size\":10},\"mode\":\"markers+text\",\"showlegend\":false,\"text\":[\"68.85\"],\"textposition\":\"top center\",\"x\":[3],\"y\":[4.5],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermap\":[{\"type\":\"scattermap\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false,\"showticklabels\":false},\"title\":{\"text\":\"3-Period Variable Branching Tree (Symmetric Layout)\"},\"width\":900,\"height\":600,\"plot_bgcolor\":\"white\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('ec27ddb5-d578-4395-85d3-3d41ba61f70d');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };            </script>        </div>\n```\n:::\n:::\n\n\n::: {#2d231c2e .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\n\ndef plot_variable_branching_tree_scaled(vertical_scale=0.5, horizontal_scale=2.0):\n    \"\"\"\n    Plots a 3-period variable branching tree in a narrower vertical \n    layout and a longer horizontal layout.\n\n    :param vertical_scale: Factor (<1 = narrower, >1 = taller) for vertical spacing\n    :param horizontal_scale: Factor (>1 = longer, <1 = shorter) for horizontal spacing\n    \"\"\"\n    # 1. Build tree nodes/edges\n    nodes = {(0, 0): 100}  # Root node at time t=0, index=0 => value=100\n    edges = []\n\n    # Track how many nodes created at each period t\n    next_index = defaultdict(int)\n    next_index[0] = 1\n\n    # transitions: dict[(t, i)] -> list of factors from node (t,i)\n    transitions = {\n        (0, 0): [1.1, 0.9],\n        (1, 0): [1.2, 1.0, 0.8],\n        (1, 1): [1.1, 0.85],\n        (2, 0): [1.3, 0.9],\n        (2, 1): [1.2, 1.0],\n        (2, 2): [1.1],\n        (2, 3): [1.15, 0.95, 0.85],\n        (2, 4): [1.1, 0.9]\n    }\n\n    # Create nodes/edges\n    for (t, i), factors in transitions.items():\n        base_val = nodes[(t, i)]\n        for factor in factors:\n            child_t = t + 1\n            child_i = next_index[child_t]\n            next_index[child_t] += 1\n\n            child_val = round(base_val * factor, 2)\n            nodes[(child_t, child_i)] = child_val\n            edges.append(((t, i), (child_t, child_i)))\n\n    # 2. Assign symmetrical y-coords for each period\n    nodes_in_period = defaultdict(list)\n    for (t, i) in nodes.keys():\n        nodes_in_period[t].append(i)\n\n    coords = {}\n    for t in sorted(nodes_in_period.keys()):\n        node_list = sorted(nodes_in_period[t])\n        count = len(node_list)\n        # positions => 0..(count-1), shift so center is 0\n        for idx, node_i in enumerate(node_list):\n            shift = -(count - 1) / 2\n            y = (idx + shift) * vertical_scale\n            coords[(t, node_i)] = y\n\n    # 3. Build the Matplotlib figure\n    fig, ax = plt.subplots(figsize=(12, 4))  # Wider figure\n\n    # Plot edges\n    for ((t1, i1), (t2, i2)) in edges:\n        x_coords = [t1 * horizontal_scale, t2 * horizontal_scale]\n        y_coords = [coords[(t1, i1)], coords[(t2, i2)]]\n        ax.plot(x_coords, y_coords, color='black')\n\n    # Plot nodes + text\n    for (t, i), val in nodes.items():\n        x_ = t * horizontal_scale\n        y_ = coords[(t, i)]\n        ax.scatter(x_, y_, s=100, color='blue')\n        ax.text(x_, y_ + 0.2 * vertical_scale, str(val),\n                ha='center', va='bottom')\n\n    ax.set_title(\"3-Period Variable Branching Tree (Scaled)\")\n    ax.axis(\"equal\")\n    ax.axis(\"off\")\n    plt.show()\n\n# Example usage: narrower by vertical_scale=0.5, longer by horizontal_scale=2.0\nplot_variable_branching_tree_scaled(vertical_scale=0.5, horizontal_scale=2.0)\n```\n\n::: {.cell-output .cell-output-display}\n![](Chapter_Intro_Binomial_Tree_files/figure-html/cell-5-output-1.png){width=912 height=335}\n:::\n:::\n\n\n## Conclusion\nThe binomial tree model provides an effective method for pricing derivative securities. Basic binomial trees reduce computational complexity, while generalized trees may be necessary for more complex option pricing models. In further chapters, we will explore the valuation of European and American options using these models.\n\n",
    "supporting": [
      "Chapter_Intro_Binomial_Tree_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}