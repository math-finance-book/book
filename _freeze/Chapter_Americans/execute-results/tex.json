{
  "hash": "b9cdcf6f8392421617ecc22ad8b798a3",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n\n# American Options {#sec-c:americans} \n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n ![](under_construction.jpg)\n\n\n## Calls are Better Alive than Dead\n\n\n## Binomial Valuation of American Options\n\n\n## American Calls with Discrete Dividends {#sec-s:discrete}\n\nIt can be optimal to exercise an American call option early if the underlying asset pays a dividend.  The optimal exercise date will be immediately prior to the asset going ex-dividend.  Consider a call option maturing at $T'$ on an asset that will pay a known cash dividend $D$ at a known date $T<T'$.  We assume there is no continuous dividend payment, so $q=0$.  For simplicity, we assume that the date of the dividend payment is also the date that the asset goes ex-dividend; i.e., ownership of the asset at any date $t<T$ entitles the owner to receive the dividend at date $T$.  Under this assumption, it is reasonable also to assume that the stock price drops by $D$ when the dividend is paid.  \n\nThere is some ambiguity about how to define the asset price at the instant the dividend is paid---whether to include or exclude the dividend.  We will let $S_T$ denote the price including the dividend and denote the price excluding the dividend by $Z_T$, so $Z_T = S_T-D$.   In fact, it is convenient to let $Z_t$ denote the price stripped of the dividend value at all dates $t \\leq T$, so we will define \n$$\nZ_t = \\begin{cases}S_t-\\mathrm{e}^{-r(T-t)}D & \\text{if $t \\leq T$\\;,}\\\\\nS_t & \\text{if $t > T$\\;.}\n\\end{cases}\n$$\n\nNote that $Z$ is the price of the following dividend-reinvested portfolio: buy one unit of the asset at date $0$, borrow $\\mathrm{e}^{-rT}D$ at date $0$ to help finance the purchase, and use the dividend $D$ at date $T$ to retire the debt.\n\nIf we assume as usual that the asset price $S$ has a constant volatility, then, using @eq-exponential1 for a geometric Brownian motion and letting $B^*$ denote a Brownian motion under the risk-neutral probability, we have\n\\begin{align*}\nS_{T'} &= [S_T-D]\\exp\\left\\{(r-\\sigma^2/2)(T'-T)+\\sigma B^*_{T'}-\\sigma B^*_T\\right\\}\\\\\n&= \\left[S_0\\exp\\left\\{(r-\\sigma^2/2)T+\\sigma B^*_T\\right\\}-D\\right]\\\\\n&\\qquad \\times \\exp\\left\\{(r-\\sigma^2/2)(T'-T)+\\sigma B^*_{T'}-\\sigma B^*_T\\right\\}\\\\\n&=S_0\\exp\\left\\{(r-\\sigma^2/2)T'+\\sigma B^*_{T'}\\right\\} \\\\\n&\\qquad - D\\exp\\left\\{(r-\\sigma^2/2)(T'-T)+\\sigma B^*_{T'}-\\sigma B^*_T\\right\\}\\;.\n\\end{align*}\nThus, $S$ will be a sum of lognormal random variables.  A sum of lognormals is not itself lognormal, so $S$ will not be lognormal, and we are unable to calculate the option value in a simple way.\n\nWe will assume instead that $Z$ has a constant volatility $\\sigma$.  Thus, $Z$ is the price of a dividend-reinvested portfolio, it satisfies the Black-Scholes assumptions, and we have $S_{T'}=Z_{T'}$.  To value a European option, we would simply use $Z_0=S_0-\\mathrm{e}^{-rT}D$ as the initial asset price and $\\sigma$ as the volatility.\n\n### American Call Payoff\nIf the call is not exercised before the dividend is paid at date $T$, then its value at date $T$ will be\n\\begin{center}\n`Black_Scholes_Call(Z,K,r,sigma,0,Tprime-T)`\n\\end{center}\nwhere  `Z` $=Z_T$.  Hence, exercise is optimal when\n\\begin{center}\n`Z` $+$ `D` $-$ `K` $>$ `Black_Scholes_Call(Z,K,r,sigma,0,Tprime-T)`\\;.\n\\end{center}\nA lower bound for the Black-Scholes call value on the right-hand side is $Z_T-\\mathrm{e}^{-r(T'-T)}K$.  If $Z_T+D-K$ is less than or equal to this lower bound, then exercise cannot be optimal.  Thus, if $D-K$ is less than or equal to $-\\mathrm{e}^{-r(T'-T)}K$, then exercise will never be optimal.  In this circumstance, the dividend is simply too small to offset the time value of money on the exercise price $K$,  and the value of the American call written on the asset with price $S$ is the same as the value of the European call written on the dividend-reinvested portfolio with price $Z$.  \n\nOn the other hand, if $D-K > -\\mathrm{e}^{-r(T'-T)}K$, then exercise will be optimal for sufficiently large $Z_T$.  In this case, there is some\n$Z^*$ such that the owner of the call will be indifferent about exercise, and exercise will be optimal for \\vfil\\eject\nall $Z_T>Z^*$.  This $Z^*$ is defined by\n\\begin{center}\n`Z*` $+$ `D` $-$ `K` $=$ `Black_Scholes_Call(Z*,K,r,sigma,0,Tprime-T)`\\;.\n\\end{center}\nAs in the previous section, we can compute $Z^*$ by bisection.  \n\nDefine\n\\begin{align*}\nx&= \\begin{cases} 1 &\\text{if $Z_T>Z^*$\\;,}\\\\\n                               0 & \\text{otherwise\\;,}\n        \\end{cases}\\\\\ny&= \\begin{cases} 1 &\\text{if $Z_T\\leq Z^*$ and $Z_{T'}>K$\\;,}\\\\\n                               0 & \\text{otherwise\\;.}\n        \\end{cases} \n\\end{align*} \nThen the American call option will pay $[Z_T+D-K]x$ at date $T$ (due to early exercise) and $[Z_{T'}-K]y$ at date $T'$ (due to exercise at maturity), if $D-K > -\\mathrm{e}^{-r(T'-T)}K$.  \n\n### Numeraires\nAssume for now that $D-K > -\\mathrm{e}^{-r(T'-T)}K$.  The payoff $(D-K)x$ is the payoff of $D-K$ digital options maturing at $T$, and the payoff $Z_Tx$ is the payoff of one share digital on the portfolio with price $Z$.  Therefore, the value of receiving  $[Z_T+D-K]x$ at date $T$ is\n$$\nZ_0\\mathrm{N}(d_1) + \\mathrm{e}^{-rT}(D-K)\\mathrm{N}(d_2)\\; ,\n$$\nwhere\n\n\n$$\nd_1 = \\frac{\\log\\left(\\frac{Z_0}{Z^*}\\right)+\\left(r+\\frac{1}{2}\\sigma^2\\right)T}{\\sigma\\sqrt{T}}\n$$\n$$\n= \\frac{\\log\\left(\\frac{S_0-\\mathrm{e}^{-rT}D}{Z^*}\\right)+\\left(r+\\frac{1}{2}\\sigma^2\\right)T}{\\sigma\\sqrt{T}} \\;,\n$$ {#eq-americancalld1star}\n\n$$\nd_2=d_1-\\sigma\\sqrt{T}\\;.\n$$ {#eq-americancalld2star}\n\n\nAs in the previous section,^[The only difference is that here $Z$ is the price of a dividend-reinvested portfolio, so, in the notation of the previous section, we have $V_t=Z_t$.] the value of receiving $[Z_T-K]y$ at date $T'$ is \n$$\nZ_0\\times \\text{prob}^Z(y=1) - \\mathrm{e}^{-rT'}K\\times \\text{prob}^R(y=1)\\; .\n$$\n### Calculating Probabilities\nThe calculations are very similar to the calculations we did for a call option on a call.  In fact, they are exactly the same as we would do for a put option on a call.\n\n\n1. The event $y=1$ is equivalent to\n$$\n\\log Z_0 + \\left(r+\\frac{1}{2}\\sigma^2\\right)T+\\sigma B^*_T \\leq \\log Z^*\n$$\nand\n$$\n\\log Z_0 + \\left(r+\\frac{1}{2}\\sigma^2\\right)T'+\\sigma B^*_{T'} > \\log K\\; ,\n$$\n\nwhere $B^*$ is a Brownian motion when the underlying asset (with price $Z$) is used as the numeraire. \nWe can write this as\n$$\n\\frac{B^*_T}{\\sqrt{T}}<-d_1 \\quad \\text{and} \\quad - \\frac{B^*_{T'}}{\\sqrt{T'}} < d_1'\\;,\n$$ {#eq-new100}\n\nwhere $d_1$ is defined in @eq-americancalld1star,\n\n\n$$\nd_1' = \\frac{\\log\\left(\\frac{Z_0}{K}\\right)+\\left(r+\\frac{1}{2}\\sigma^2\\right)T'}{\\sigma\\sqrt{T'}}\n$$\n$$\n= \\frac{\\log\\left(\\frac{S_0-\\mathrm{e}^{-rT}D}{K}\\right)+\\left(r+\\frac{1}{2}\\sigma^2\\right)T'}{\\sigma\\sqrt{T'}}\n$$ {#eq-americancalld1}\n\n$$\nd_2'=d_1'-\\sigma\\sqrt{T'}\\;.\n$$ {#eq-americancalld2}\n\n\nThe two standard normal variables on the left-hand sides in @eq-new100 have a covariance equal to\n$$\n-\\frac{1}{\\sqrt{TT'}}\\mathrm{cov}(B_T,B_{T'}) = -\\frac{1}{\\sqrt{TT'}}\\mathrm{cov}(B_T,B_T) = -\\sqrt{\\frac{T}{T'}}\\; .\n$$\n\nHence, $\\text{prob}^Z(y=1)$ is the probability that $a\\leq -d_1$ and $b\\leq d_1'$, where $a$ and $b$ are standard normal random variables with covariance (= correlation coefficient) of $-\\sqrt{T/T'}$.  We are writing this probability as $\\mathrm{M}\\!\\left(-d_1,d_1',-\\sqrt{T/T'}\\right)$.  \n\n2. The calculation for $\\text{prob}^R(y=1)$ is similar.  The event $y=1$\nis equivalent to\n$$\n\\log Z_0 + \\left(r+\\frac{1}{2}\\sigma^2\\right)T+\\sigma B^*_T \\leq \\log Z^*\n$$\nand\n$$\n\\log Z_0 + \\left(r+\\frac{1}{2}\\sigma^2\\right)T'+\\sigma B^*_{T'} > \\log K\\; ,\n$$\nwhere $B^*$ now denotes a Brownian motion under the risk-neutral probability.  These are equivalent to\n$$\n\\frac{B^*_T}{\\sqrt{T}}\\leq -d_2 \\quad \\text{and} \\quad - \\frac{B^*_{T'}}{\\sqrt{T'}} < d_2'\\;.\n$$ {#eq-new11}\n\nHence, $\\text{prob}^R(y=1)=\\mathrm{M}\\!\\left(-d_2,d_2',-\\sqrt{T/T'}\\right)$.  \n\n\n\n### American Call Pricing Formula\n\n\n::: Rule\n## \nUnder our assumptions, the value of an American call option maturing at $T'$ with a dividend payment of $D$ at date $T<T'$ is as follows.  \nIf \n$$\nD-K \\leq -\\mathrm{e}^{-r(T'-T)}K\\;,\n$$\nthen the value of the call is given by the Black-Scholes formula\n$$\n[S_0-\\mathrm{e}^{-rT}D]\\mathrm{N}(d_1')-\\mathrm{e}^{-rT}K\\mathrm{N}(d_2')\\; ,\n$$\n\nwhere $d_1'$ and $d_2'$ are defined in @eq-americancalld1 - @eq-americancalld2.\nOn the other hand, if \n$$\nD-K > -\\mathrm{e}^{-r(T'-T)}K\\;,\n$$\nthen the value of the call is\n\n$$\n\\begin{multline}\n[S_0-\\mathrm{e}^{-rT}D]\\mathrm{N}(d_1) + \\mathrm{e}^{-rT}(D-K)\\mathrm{N}(d_2)\\\\ +[S_0-\\mathrm{e}^{-rT}D]\\mathrm{M}\\!\\left(-d_1,d_1',-\\sqrt{T/T'}\\right) \\\\- \\mathrm{e}^{-rT'}K\\mathrm{M}\\!\\left(-d_2,d_2',-\\sqrt{T/T'}\\right)\\;,\n\\end{multline} \n$$ {#eq-americancall}\n\nwhere $d_1$ and $d_2$ are defined in @eq-americancalld1star - @eq-americancalld2star and $d_1'$ and $d_2'$ are defined in @eq-americancalld1 - @eq-americancalld2.\n:::\n\nTo value an American call when there is one dividend payment before the option matures, we input the initial asset price $S_0$ and then compute $Z_0=X_0-\\mathrm{e}^{-rT}D$.  If $D-K \\leq -\\mathrm{e}^{-r(T'-T)}K$, we return the Black-Scholes value of a European call written on $Z$.  Otherwise, we need to compute $Z^*$ and our bisection algorithm requires an upper bound for $Z^*$, which would be any value of $Z_T$ such that exercise at $T$ is optimal.  It is not obvious what this should be, so we start with $K$ and keep doubling this until we obtain a value of $Z_T$ at which exercise would be optimal.  Then, we use the bisection algorithm to compute $Z^*$ and finally compute the option value @eq-americancall.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\n\"\"\"\nimport numpy as np\n\nimport numpy as np\nfrom scipy.stats import norm\nimport scipy.optimize as optimize\n\ndef black_scholes_call(S, K, r, sigma, q, T):\n\"\"\"\n\"\"\"\n    Inputs:\n    S = initial stock price\n    K = strike price\n    r = risk-free rate\n    sigma = volatility\n    q = dividend yield\n    T = time to maturity\n\"\"\"\n\"\"\"\n    if sigma == 0:\n        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)\n    else:\n        d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        N1 = norm.cdf(d1)\n        N2 = norm.cdf(d2)\n        return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2\n\n\ndef american_call_dividend(S, K, r, sigma, Div, TDiv, TCall):\n    LessDiv = S - np.exp(-r * TDiv) * Div\n    if Div / K <= 1 - np.exp(-r * (TCall - TDiv)):\n        return black_scholes_call(LessDiv, K, r, sigma, 0, TCall)\n\n    upper = K\n    while upper + Div - K < black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv):\n        upper *= 2\n\n    tol = 1e-6\n    lower = 0\n    flower = Div - K\n    fupper = upper + Div - K - black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv)\n    guess = 0.5 * lower + 0.5 * upper\n    fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\n    while upper - lower > tol:\n        if fupper * fguess < 0:\n            lower = guess\n            flower = fguess\n            guess = 0.5 * lower + 0.5 * upper\n            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\n        else:\n            upper = guess\n            fupper = fguess\n            guess = 0.5 * lower + 0.5 * upper\n            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\n    LessDivStar = guess\n\n    d1 = (np.log(LessDiv / LessDivStar) + (r + sigma ** 2 / 2) * TDiv) / (sigma * np.sqrt(TDiv))\n    d2 = d1 - sigma * np.sqrt(TDiv)\n    d1prime = (np.log(LessDiv / K) + (r + sigma ** 2 / 2) * TCall) / (sigma * np.sqrt(TCall))\n    d2prime = d1prime - sigma * np.sqrt(TCall)\n    rho = -np.sqrt(TDiv / TCall)\n    N1 = norm.cdf(d1)\n    N2 = norm.cdf(d2)\n    M1 = binormal_prob(-d1, d1prime, rho)\n    M2 = binormal_prob(-d2, d2prime, rho)\n\n    return LessDiv * N1 + np.exp(-r * TDiv) * (Div - K) * N2 + LessDiv * M1 - np.exp(-r * TCall) * K * M2\n\n# Example usage\n\nS = 100\nK = 90\nr = 0.05\nsigma = 0.2\nDiv = 5\nTDiv = 0.5\nTCall = 1\nN = 10\n\nprint(\"American Call with Dividend:\", american_call_dividend(S, K, r, sigma, Div, TDiv, TCall))\n\"\"\"\n```\n\n::: {#american_call_dividend .cell-output .cell-output-display execution_count=2}\n```\n'\\n    if sigma == 0:\\n        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)\\n    else:\\n        d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\\n        d2 = d1 - sigma * np.sqrt(T)\\n        N1 = norm.cdf(d1)\\n        N2 = norm.cdf(d2)\\n        return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2\\n\\n\\ndef american_call_dividend(S, K, r, sigma, Div, TDiv, TCall):\\n    LessDiv = S - np.exp(-r * TDiv) * Div\\n    if Div / K <= 1 - np.exp(-r * (TCall - TDiv)):\\n        return black_scholes_call(LessDiv, K, r, sigma, 0, TCall)\\n\\n    upper = K\\n    while upper + Div - K < black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv):\\n        upper *= 2\\n\\n    tol = 1e-6\\n    lower = 0\\n    flower = Div - K\\n    fupper = upper + Div - K - black_scholes_call(upper, K, r, sigma, 0, TCall - TDiv)\\n    guess = 0.5 * lower + 0.5 * upper\\n    fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\\n    while upper - lower > tol:\\n        if fupper * fguess < 0:\\n            lower = guess\\n            flower = fguess\\n            guess = 0.5 * lower + 0.5 * upper\\n            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\\n        else:\\n            upper = guess\\n            fupper = fguess\\n            guess = 0.5 * lower + 0.5 * upper\\n            fguess = guess + Div - K - black_scholes_call(guess, K, r, sigma, 0, TCall - TDiv)\\n    LessDivStar = guess\\n\\n    d1 = (np.log(LessDiv / LessDivStar) + (r + sigma ** 2 / 2) * TDiv) / (sigma * np.sqrt(TDiv))\\n    d2 = d1 - sigma * np.sqrt(TDiv)\\n    d1prime = (np.log(LessDiv / K) + (r + sigma ** 2 / 2) * TCall) / (sigma * np.sqrt(TCall))\\n    d2prime = d1prime - sigma * np.sqrt(TCall)\\n    rho = -np.sqrt(TDiv / TCall)\\n    N1 = norm.cdf(d1)\\n    N2 = norm.cdf(d2)\\n    M1 = binormal_prob(-d1, d1prime, rho)\\n    M2 = binormal_prob(-d2, d2prime, rho)\\n\\n    return LessDiv * N1 + np.exp(-r * TDiv) * (Div - K) * N2 + LessDiv * M1 - np.exp(-r * TCall) * K * M2\\n\\n# Example usage\\n\\nS = 100\\nK = 90\\nr = 0.05\\nsigma = 0.2\\nDiv = 5\\nTDiv = 0.5\\nTCall = 1\\nN = 10\\n\\nprint(\"American Call with Dividend:\", american_call_dividend(S, K, r, sigma, Div, TDiv, TCall))\\n'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Chapter_Americans_files\\figure-pdf"
    ],
    "filters": []
  }
}