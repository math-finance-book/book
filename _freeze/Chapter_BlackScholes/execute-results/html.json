{
  "hash": "ad0473cf1019e19061079e24d425b3e3",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n# Black-Scholes {#sec-c:blackscholes} \n\n::: {#89f30889 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG\"></script>\n```\n:::\n:::\n\n\nThis chapter expands the discussion of the Black-Scholes formulas for European call and put option values. Options are written on asset prices, not dividend-reinvested asset prices, which we have primarily considered until now. U.S. companies typically pay dividends quarterly. If an option matures before the next dividend payment (or more precisely, before the next ex-dividend date when the stock begins trading without the right to the subsequent dividend), then dividends do not affect the option pricing. We discuss a model suitable for valuing options that mature after one or more upcoming dividend payments in @sec-c:binomial. In this chapter, we make a simplifying assumption that dividends are paid continuously at a rate proportional to the underlying asset price.\n\nThe Black-Scholes assumptions are that the underlying asset pays a constant dividend yield $q$ and has price $S$ satisfying\n$$\n\\frac{\\mathrm{d}  S}{S} = (\\mu - q) \\,\\mathrm{d}   t + \\sigma\\,\\mathrm{d}   B\n$$ {#eq-bs1}\n\nfor a Brownian motion $B$. Here $\\sigma$ is assumed to be constant, though we allow it to vary in a non-random way at the end of the chapter. The parameter $\\mu$ can be a quite general random process. We also assume a constant continuously-compounded risk-free rate $r$.\n\nUnder these assumptions, we complete the discussion from @sec-c:pdes and @sec-c:girsanov to derive option pricing formulas. Recall that to price a European call option, we need only calculate the probabilities of the option finishing in the money when we use the risk-free asset and the underlying asset as numeraires. We accomplish this using the results of @sec-s:girsanov.\n\n## European Call and Put Values\n\nIn @sec-s:girsanov—see @eq-riskneutral11—we learned that under the Black-Scholes assumption @eq-bs1 we have\n$$\\frac{\\mathrm{d}  S}{S} =( r-q)\\,\\mathrm{d}   t+\\sigma\\,\\mathrm{d}   B^*\\; ,$$\nwhere $B^*$ is a Brownian motion under the risk-neutral probability.^[There is no other risky asset price $Y$ in this model, so the subscripts we used in @sec-s:girsanov on the volatility coefficients and on $B$ and $B^*$ to distinguish the Brownian motion driving $S$ from the Brownian motion driving $Y$ and to distinguish their volatilities are not needed here.]\n\nIn @sec-c:geometricbrownianmotion, we observed that this is equivalent to\n$$\\mathrm{d}  \\log S = \\left(r-q-\\frac{1}{2}\\sigma^2\\right)\\,\\mathrm{d}   t + \\sigma\\,\\mathrm{d}   B^*\\; .$$\n\nA European call option pays $S_T-K$ at date $T$ if $S_T>K$ and zero otherwise. Let\n\\begin{equation*}\nx =  \\begin{cases} 1 & \\text{if $S_T>K$}\\; ,\\\\\n0 & \\text{otherwise}\\;.\n\\end{cases}\n\\end{equation*}\nThe payoff of the call can be written as $xS_T-xK$. This is equivalent to one share digital minus $K$ digitals, with the digitals paying in the event that $S_T>K$. The share digital is worth $\\mathrm{e}^{-q T}S_0\\mathrm{N}(d_1)$ at date $0$ and each digital is worth $\\mathrm{e}^{-rT}\\mathrm{N}(d_2)$. Note that @eq-digital_d2 and @eq-sharedigital_d1 for $d_1$ and $d_2$ imply $d_2 = d_1-\\sigma{\\sqrt{T}}$. Therefore, combining the results of the previous two sections yields the Black-Scholes formula:\n\n::: Rule\n## \nThe value of a European call option at date $0$ is \n$$\n\\mathrm{e}^{-q T}S_0\\mathrm{N}(d_1)-\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;,\n$$ {#eq-blackscholescall}\n\nwhere $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\\sigma{\\sqrt{T}}$.\n:::\n\nA European put option pays $K-S_T$ at date $T$ if $S_T<K$ and zero otherwise. Let\n\\begin{equation*}\ny =  \\begin{cases} 1 & \\text{if $S_T<K$}\\; ,\\\\\n0 & \\text{otherwise}\\;.\n\\end{cases}\n\\end{equation*}\nThe payoff of the put option is $yK-yS_T$. This is equivalent to $K$ digitals minus one share digital, with all digitals paying when $S_T<K$. Thus, we have:\n\n::: Rule\n## \nThe value of a European put option at date $0$ is \n$$\n\\mathrm{e}^{-rT}K\\mathrm{N}(-d_2)-\\mathrm{e}^{-q T}S_0\\mathrm{N}(-d_1)\\;,\n$$ {#eq-blackscholesput}\n\nwhere $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\\sigma{\\sqrt{T}}$.\n:::\n\nThe values of European puts and calls satisfy put-call parity, and we can derive one from the other using^[The put-call parity relation follows from the fact that both the left and the right-hand sides are the prices of portfolios that have value $\\max(S_T,K)$ at the option's maturity. To see this for the left-hand side, note that $\\mathrm{e}^{-rT}K$ is sufficient cash to accumulate to $K$ at date $T$, allowing exercise of the call when it is in the money and retention of the cash $K$ otherwise. For the right-hand side, note that $\\mathrm{e}^{-q T}S_0$ is enough cash to buy $\\mathrm{e}^{-q T}$ shares of the stock at date $0$ which, with reinvestment of dividends, will accumulate to one share at date $T$, enabling exercise of the put if it is in the money or retention of the share otherwise.]\n$$\n\\mathrm{e}^{-rT}K + \\text{Call Price} = \\mathrm{e}^{-q T}S_0+ \\text{Put Price}\\;.\n$$ {#eq-putcallparity11}\n\nThe following figure shows how the Black-Scholes call and put values depend on the underlying asset price and other model parameters. The call and put values are computed with the following code.\n\n::: {#01b23097 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.stats import norm\n\ndef black_scholes_call(S, K, r, sigma, q, T):\n    \"\"\"\n    Inputs:\n    S = initial stock price\n    K = strike price\n    r = risk-free rate\n    sigma = volatility\n    q = dividend yield\n    T = time to maturity\n    \"\"\"\n    if sigma <= 0 or T <= 0:\n        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)\n    \n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    N1 = norm.cdf(d1)\n    N2 = norm.cdf(d2)\n    return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2\n\ndef black_scholes_put(S, K, r, sigma, q, T):\n    \"\"\"\n    Inputs:\n    S = initial stock price\n    K = strike price\n    r = risk-free rate\n    sigma = volatility\n    q = dividend yield\n    T = time to maturity\n    \"\"\"\n    if sigma <= 0 or T <= 0:\n        return max(0, np.exp(-r * T) * K - np.exp(-q * T) * S)\n\n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    N1 = norm.cdf(-d1)\n    N2 = norm.cdf(-d2)\n    return np.exp(-r * T) * K * N2 - np.exp(-q * T) * S * N1\n```\n:::\n\n\n::: {#fig-bs-call-put} \n<iframe height=\"800\" width=\"720\" src=\"https://black-scholes.koyeb.app/\"></iframe>\n\n**Black-Scholes Explorer.** \n:::\n\n## Greeks\n\nThe derivatives (calculus derivatives, not financial derivatives) of an option pricing formula with respect to the inputs are commonly called Greeks. The most important Greek is the option delta, which measures the sensitivity of the option value to changes in the value of the underlying asset. The following table shows the standard Greeks with reference to the Black-Scholes pricing formula.\n\n\\begin{table}\n\\centering\n\\caption{Black-Scholes Greeks}\n\\begin{tabular}{lccccc}\n\\hline \\\\\n\\bfseries{Input} & \\bfseries{Input Symbol} & \\qquad &\\bfseries{Greek} & \\qquad & \\bfseries{Greek Symbol}\\\\\n\\hline \\\\\nStock price & $S$  &\\qquad& delta &\\qquad& $\\delta$ \\\\\n\\hline \\\\\ndelta & $\\delta$ &\\qquad& gamma&\\qquad & $\\Gamma$\\\\\n\\hline \\\\\n- Time to maturity  & $-T$&\\qquad& theta &\\qquad& $\\Theta$ \\\\\n\\hline \\\\\nVolatility & $\\sigma$&\\qquad& vega &\\qquad& $\\cal{V}$ \\\\\n\\hline \\\\\nInterest rate & $r$ &\\qquad& rho&\\qquad & $\\rho$\\\\\n\\hline\n\\end{tabular}\n\\end{table}\n\n\n| **Input**          | **Input Symbol** |       | **Greek**  |       | **Greek Symbol** |\n| ------------------ | ---------------- | ----- | ---------- | ----- | ---------------- |\n| Stock price        | $S$              |       | delta      |       | $\\delta$         |\n| delta              | $\\delta$         |       | gamma      |       | $\\Gamma$         |\n| - Time to maturity | $-T$             |       | theta      |       | $\\Theta$         |\n| Volatility         | $\\sigma$         |       | vega       |       | $\\cal{V}$        |\n| Interest rate      | $r$              |       | rho        |       | $\\rho$           |\n\n\nThe second line of the table shows $\\delta$ as an input.^[The delta is frequently denoted by the upper case $\\Delta$, but we use the lower case, reserving the upper case for discrete changes, e.g., $\\Delta t$. One may notice that the symbol for vega is different from the others; this reflects the fact that vega is not actually a Greek letter.] Of course, delta is not an input but rather is calculated from the formula. Gamma, the derivative of $\\delta$, is the second derivative of the option price with respect to the underlying asset price. We calculate $\\Theta$ as the derivative with respect to $-T$ instead of $T$ because time-to-maturity $T$ decreasing ($-T$ increasing) is equivalent to time passing, so $\\Theta$ measures the change in the option value as time passes.\n\nWe can calculate these from the Black-Scholes formula using the chain rule from differential calculus. The derivative of the normal distribution function $\\mathrm{N}$ is the normal density function $\\mathrm{n}$ defined as\n$$\\mathrm{n}(d) = \\frac{1}{\\sqrt{2\\pi}}\\mathrm{e}^{-d^2/2}\\; .$$\nOne can verify directly that\n$$\n\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)=\\mathrm{e}^{-rT}K\\mathrm{n}(d_2)\\;,\n$$ {#eq-greeksimplify}\n\nwhich simplifies the calculations for the Black-Scholes call option pricing formula. \nFor this formula, the Greeks are as follows:\n\\begin{align*}\n\\delta &= \\mathrm{e}^{-q T}\\mathrm{N}(d_1) + \\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\frac{\\partial d_1}{\\partial S} -\\mathrm{e}^{-rT}K\\mathrm{n}(d_2)\\frac{\\partial d_2}{\\partial S}\\\\\n&= \\mathrm{e}^{-q T}\\mathrm{N}(d_1) + \\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\left(\\frac{\\partial d_1}{\\partial S}-\\frac{\\partial d_2}{\\partial S}\\right)\\\\\n&=\\mathrm{e}^{-q T}\\mathrm{N}(d_1)\\;,\\\\ \n\\Gamma &=\\mathrm{e}^{-q T}\\mathrm{n}(d_1)\\frac{\\partial d_1}{\\partial S}= \\mathrm{e}^{-q T}\\mathrm{n}(d_1)\\frac{1}{S\\sigma\\sqrt{T}}\\;,\n\\end{align*}\n\\begin{align*}\n \\Theta &=-\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\frac{\\partial d_1}{\\partial T} +q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1) \\\\\n&\\quad + \\mathrm{e}^{-rT}K\\mathrm{n}(d_2)\\frac{\\partial d_2}{\\partial T} -r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\left(\\frac{\\partial d_2}{\\partial T}-\\frac{\\partial d_1}{\\partial T}\\right)\\\\\n&\\quad + q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1)-r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=-\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\frac{\\sigma}{2\\sqrt{T}}+ q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1)-r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;,\\\\\n \\cal{V}&=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\frac{\\partial d_1}{\\partial \\sigma} - \\mathrm{e}^{-rT}K\\mathrm{n}(d_2)\\frac{\\partial d_2}{\\partial \\sigma}\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\left(\\frac{\\partial d_1}{\\partial \\sigma}-\\frac{\\partial d_2}{\\partial \\sigma}\\right)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\sqrt{T}\\;,\\\\\n \\rho &=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\frac{\\partial d_1}{\\partial r} - \\mathrm{e}^{-rT}K\\mathrm{n}(d_2)\\frac{\\partial d_2}{\\partial r} +T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}(d_1)\\left(\\frac{\\partial d_1}{\\partial r}-\\frac{\\partial d_2}{\\partial r}\\right)+T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;.\n\\end{align*} \n\nWe can calculate the Greeks of a European put option from the call option Greeks and put-call parity, assuming $q=0$:\n$$\\text{Put Price} = \\text{Call Price} +\\mathrm{e}^{-rT}K- \\mathrm{e}^{-q T}S_0\\; .$$\nFor example, the delta of a put is the delta of a call with the same strike and maturity minus $\\mathrm{e}^{-q T}$, and the gamma of a put is the same as the gamma of the corresponding call.\n\nTo see how the Greeks respond to changes in the various inputs to the Black-Scholes formula—interest rate $r$, time to maturity $T$, and volatility $\\sigma$—readers are encouraged to interact with the plot below. The code used for the calculations follows:\n\n::: {#f66c4bff .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.stats import norm\n\ndef d1(S, K, r, sigma, T):\n    \"\"\"\n    Computes d1 used in Black-Scholes.\n    \"\"\"\n    return (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n\ndef d2(S, K, r, sigma, T):\n    \"\"\"\n    Computes d2 used in Black-Scholes.\n    \"\"\"\n    return d1(S, K, r, sigma, T) - sigma * np.sqrt(T)\n\ndef call_price(S, K, r, sigma, T):\n    \"\"\"\n    Black-Scholes price for a call option.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    return S * norm.cdf(d_1) - K * np.exp(-r * T) * norm.cdf(d_2)\n\ndef put_price(S, K, r, sigma, T):\n    \"\"\"\n    Black-Scholes price for a put option.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    return K * np.exp(-r * T) * norm.cdf(-d_2) - S * norm.cdf(-d_1)\n\ndef greeks(S, K, r, sigma, T, option_type=\"call\"):\n    \"\"\"\n    Return the main Greeks for Black-Scholes.\n\n    Parameters\n    ----------\n    S : float or numpy array\n        Underlying price.\n    K : float\n        Strike price.\n    r : float\n        Risk-free interest rate.\n    sigma : float\n        Volatility.\n    T : float\n        Time to maturity (in years).\n    option_type : str\n        'call' or 'put'.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    pdf_d1 = norm.pdf(d_1)\n    cdf_d1 = norm.cdf(d_1)\n    cdf_d2 = norm.cdf(d_2)\n    \n    if option_type == \"call\":\n        # Delta\n        delta = cdf_d1\n        # Gamma (same for call & put)\n        gamma = pdf_d1 / (S * sigma * np.sqrt(T))\n        # Vega (same for call & put, but typically scaled by 0.01 if desired in %)\n        vega = S * pdf_d1 * np.sqrt(T)\n        # Theta\n        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \\\n                - r * K * np.exp(-r * T) * cdf_d2\n        # Rho\n        rho = K * T * np.exp(-r * T) * cdf_d2\n    else:  # put\n        # Delta\n        delta = cdf_d1 - 1\n        # Gamma (same for call & put)\n        gamma = pdf_d1 / (S * sigma * np.sqrt(T))\n        # Vega (same for call & put)\n        vega = S * pdf_d1 * np.sqrt(T)\n        # Theta\n        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \\\n                + r * K * np.exp(-r * T) * norm.cdf(-d_2)\n        # Rho\n        rho = - K * T * np.exp(-r * T) * norm.cdf(-d_2)\n\n    return delta, gamma, vega, theta, rho\n```\n:::\n\n\n::: {#fig-bs-greeks} \n<iframe height=\"750\" width=\"720\" src=\"https://greeks.koyeb.app/\"></iframe>\n**Black-Scholes Greeks Explorer.** \n:::\n\n## Theta and Gamma in Delta Hedges {#sec-s:deltahedging}\n\nLet $C(t, S_t)$ denote the value at date $t$ of a European call option that matures at $T>t$ under the Black-Scholes assumption. This value is given by the Black-Scholes call formula, taking the initial underlying asset price to be $S_t$ and the time to maturity to be $T-t$.\nIto's formula tells us that\n\n$$\n\\mathrm{d}  C = \\frac{\\partial C}{\\partial S}\\,\\mathrm{d}   S + \\frac{\\partial C}{\\partial t}\\mathrm{d}   t + \\frac{1}{2}\\frac{\\partial^2C}{\\partial S^2} (\\mathrm{d}  S)^2  \n$$\n\nUsing our notation for Greeks, this becomes\n$$\n\\mathrm{d}  C = \\delta \\,\\mathrm{d}   S + \\Theta \\,\\mathrm{d}   t + \\frac{1}{2}\\Gamma (\\mathrm{d}  S)^2  = \\delta \\,\\mathrm{d} S - \\Theta \\,\\mathrm{d} t + \\frac{1}{2}\\Gamma \\sigma^2 S^2 \\,\\mathrm{d} t\\,.\n$$\n\nIf we sell a call option and combine the proceeds with borrowed funds to buy $\\delta$ shares of the underlying asset, as discussed in @sec-c:deltas, then the change in the portfolio value is\n$$\\delta (\\mathrm{d} S + q S \\,\\mathrm{d} t) - (\\delta S - C)r\\mathrm{d} t - \\mathrm{d} C$$\nwhich simplifies to\n$$\\delta q S \\,\\mathrm{d} t - (\\delta S - C)r\\,\\mathrm{d} t - \\Theta \\,\\mathrm{d} t - \\frac{1}{2}\\Gamma \\sigma^2 S^2 \\,\\mathrm{d} t\\,.\n$$ {#eq-hedgeprofits}\n\nSeveral aspects of this result are noteworthy. First, as noted earlier, the delta hedge eliminates the exposure to changes in the price of the underlying—there is no $\\mathrm{d}  S$ term in @eq-hedgeprofits. Second, $\\Theta$ is negative because it captures the time decay in the option value; being short the option means the portfolio will profit from time decay at rate $-\\Theta$. Third, this portfolio is short gamma. We can also say it is short convexity, the term convexity referring to the convex shape of the option value as a function of the price of the underlying, which translates mathematically to a positive second derivative (gamma).^[A curious reader may ask why we don't say that the portfolio is long concavity instead of saying that it is short convexity. This is a mystery to your authors as well.] The volatility in the stock makes convexity valuable, and a portfolio that is short convexity will suffer losses. Finally, the portfolio is earning dividends but paying interest.\n\nIt is straightforward to check, from the definitions of $\\Theta$, $\\Gamma$ and $\\delta$ in the preceding section, that the sum of the terms in @eq-hedgeprofits is zero. The time decay in the option value and dividends received on the shares of the underlying exactly offset the losses due to convexity and interest. Therefore, the delta hedge is a perfect hedge. The portfolio, which has zero cost, neither earns nor loses money. This is true not only on average but for every possible change in the stock price.\n\n## Implied Volatilities {#sec-s:impliedvolatility}\n\nAll of the inputs into the option pricing formulas are in theory observable, except for the volatility coefficient $\\sigma$. We can estimate $\\sigma$ from historical data (see @sec-c:stochasticvolatility), or we can estimate it from the prices of other options. The latter method exploits the fact that there is a one-to-one relationship between the price given by the Black-Scholes formula and the $\\sigma$ that is input, so one can take the price as given and infer $\\sigma$ from the formula. The $\\sigma$ computed in this way is called the implied volatility. The implied volatility from one option can be used to price another option, perhaps one that is not traded or is less actively traded.\n\nEven if we acknowledge that the model is not perfectly correct, the computation of implied volatilities is still useful for characterizing market prices because we can quickly describe an option as expensive or cheap depending on whether its implied volatility is large or small. Somewhat paradoxically, it is less easy to see if an option is expensive or cheap by looking at its price alone because one must consider the price in the context of the exercise price and maturity. To some extent, the implied volatility normalizes the price relative to the exercise price and maturity. Of course, it does not always pay to sell expensive options or buy cheap options unless they are expensive or cheap relative to an accurate model.\n\nIf we compute implied volatilities for options with the same maturity but different strikes, we will typically obtain different implied volatilities for different options. If we plot implied volatility against the strike, the pattern one normally sees for equities and equity indices is the implied volatility declining as the strike increases until the strike is somewhere near the current value of the underlying, so the option is at the money. The implied volatility then generally flattens out or increases slightly at higher strikes. The graph resembles a twisted smile (smirk). This pattern has been very pronounced in equity index option prices since the crash of 1987. This moneyness structure of implied volatilities is inconsistent with the Black-Scholes model. It suggests that the risk-neutral return distribution is not lognormal but instead exhibits a higher likelihood of extreme returns than the lognormal distribution—that is, it has fat tails—with the likelihood of extreme negative returns being higher than the likelihood of extreme positive returns—that is, it is skewed.\n\n## Exercises\n\n::: {#exr-black1}\n Use put-call parity to derive the Greeks of a put option, and write a Python function that computes the value and Greeks.\n::: \n::: {#exr-black2}\n Consider delta and gamma hedging a short call option, using the underlying and a put with the same strike and maturity as the call.  Calculate the position in the underlying and the put that you should take, using the analysis in @sec-s:gammahedging.  Will you ever need to adjust this hedge?  Relate your result to put-call parity.\n:::\n::: {#exr-black3}\n Compute the value of an at-the-money call option ($S=K$) using the Python code for volatilities $\\sigma = .01, .02, \\ldots, 1.0$.  Plot the call value against the volatility.\n:::\n::: {#exr-black4}\n Repeat the previous problem for  $S=1.2K$ (an example of an in-the-money call option).\n:::\n\n",
    "supporting": [
      "Chapter_BlackScholes_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}