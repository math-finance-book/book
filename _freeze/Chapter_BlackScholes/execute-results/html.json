{
  "hash": "a5c677c19a2a2b15dae19e6847ff1ed7",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n\n# Black-Scholes {#sec-c:blackscholes} \n\n::: {#143f7d55 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG\"></script>\n```\n:::\n:::\n\n\nThis chapter explains the Black-Scholes formulas for the values of European calls and puts.  We will also see how to calculate implied volatilities and the option Greeks.  The Black-Scholes assumptions are that the underlying asset pays a constant dividend yield $q$ and has price $S$ satisfying\n$$\n\\frac{\\d  S}{S} = \\mu\\d   t + \\sigma\\d   B\n$$ {#eq-bs1}\n\nfor a Brownian motion B.  Here $\\sigma$ is assumed to be constant (though we will allow it to vary in a non-random way at the end of the chapter) and $\\mu$ can be a quite general random process.  It is also assumed that there is a constant continuously-compounded risk-free rate $r$.\n\nUnder these assumptions, we  complete the discussion of @sec-s:introoptions to derive  option pricing formulas.  Recall that, to price a European call option, all that remains to be done is to calculate the probabilities of the option finishing in the money when we use the risk-free asset and the underlying asset as numeraires.  We do this using the results of @sec-s:girsanov.  \n\n## European Call and Put Values\n\n\nIn @sec-s:girsanov---see  @eq-riskneutral11---we learned that under the \nBlack-Scholes assumption @eq-bs1 we have\n$$\\frac{\\d  S}{S} =( r-q)\\d   t+\\sigma\\d   B^*\\; ,$$\nwhere $B^*$ is a Brownian motion under the risk-neutral probability.^[There is no other risky asset price $Y$ in this model, so the subscripts we used in @sec-s:girsanov] on the volatility coefficients and on $B$ and $B^*$ to distinguish the Brownian motion driving $S$ from the Brownian motion driving $Y$ and to distinguish their volatilities are not needed here.\nIn @sec-s:geometricbrownianmotion, we observed that this is equivalent to\n$$\\d  \\log S = \\left(r-q-\\frac{1}{2}\\sigma^2\\right)\\d   t + \\sigma\\d   B^*\\; .$$\n\n\nA European call option pays $S_T-K$ at date $T$ if $S_T>K$ and 0 otherwise.  Again letting\n\\begin{equation*}\nx =  \\begin{cases} 1 & \\text{if $S_T>K$}\\; ,\\\\\n0 & \\text{otherwise}\\;,\n\\end{cases}\n\\end{equation*}\nthe payoff of the call can be written as $xS_T-xK$.  This is equivalent to one share digital minus $K$ digitals, with the digitals paying in the event that $S_T>K$.  The share digital is worth $\\mathrm{e}^{-q T}S_0\\mathrm{N}(d_1)$ at date $0$ and each digital is worth $\\mathrm{e}^{-rT}\\mathrm{N}(d_2)$.  Note that  @eq-digital_d2 and @eq-sharedigital_d1 for $d_1$ and $d_2$ imply $d_2 = d_1-\\sigma{\\sqrt{T}}$.  Therefore, combining the results of the previous two sections yields the Black-Scholes formula: \\index{Black-Scholes formula}\n\n::: Rule\n## \nThe value of a European call option at date $0$ is \n$$\n\\mathrm{e}^{-q T}S_0\\mathrm{N}(d_1)-\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;,\n$$ {#eq-blackscholescall}\n\nwhere $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\\sigma{\\sqrt{T}}$.\n:::\n\n\n\nA European put option pays $K-S_T$ at date $T$ if $S_T<K$ and 0 otherwise.  As before, let\n\\begin{equation*}\ny =  \\begin{cases} 1 & \\text{if $S_T<K$}\\; ,\\\\\n0 & \\text{otherwise}\\;.\n\\end{cases}\n\\end{equation*}\nThe payoff of the put option is $yK-yS_T$.  This is equivalent to $K$ digitals minus one  share digital, all of the digitals paying when $S_T<K$.  Thus, we have:\n\n::: Rule\n## \nThe value of a European put option at date $0$ is \n$$\n\\mathrm{e}^{-rT}K\\mathrm{N}(-d_2)-\\mathrm{e}^{-q T}S_0\\mathrm{N}(-d_1)\\;,\n$$ {#eq-blackscholesput}\n\nwhere $d_1$ is defined in @eq-sharedigital_d1 and $d_2 = d_1-\\sigma{\\sqrt{T}}$.\n:::\n\n\nThe values of the European put and call satisfy put-call parity, \\index{put-call parity} and we can also find one from the other by^[The put-call parity relation follows from the fact that both the left and the right-hand sides are the prices of portfolios that have value $\\max(S_T,K)$ at the maturity of the option.  To see this for the left-hand side, note that $\\mathrm{e}^{-rT}K$ is sufficient cash to accumulate to $K$ at date $T$, allowing exercise of the call when it is in the money and retention of the cash $K$ otherwise.  For the right-hand side, note that $\\mathrm{e}^{-q T}S_0$ is enough cash to buy $\\mathrm{e}^{-q T}$ shares of the stock at date $0$ which, with reinvestment of dividends, will accumulate to one share at date $T$, enabling exercise of the put if it is in the money or retention of the share otherwise.]\n$$\n\\mathrm{e}^{-rT}K + \\text{Call Price} = \\mathrm{e}^{-q T}S_0+ \\text{Put Price}\\;.\n$$ {#eq-putcallparity11}\n\nThe following figure shows how the Black-Scholes call and put values depend on the underlying asset price and other model parameters.  The call and put values are computed with the following code.\n\n::: {#3ee37f87 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.stats import norm\n\ndef black_scholes_call(S, K, r, sigma, q, T):\n    \"\"\"\n    Inputs:\n    S = initial stock price\n    K = strike price\n    r = risk-free rate\n    sigma = volatility\n    q = dividend yield\n    T = time to maturity\n    \"\"\"\n    if sigma <= 0 or T <= 0:\n        return max(0, np.exp(-q * T) * S - np.exp(-r * T) * K)\n    \n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    N1 = norm.cdf(d1)\n    N2 = norm.cdf(d2)\n    return np.exp(-q * T) * S * N1 - np.exp(-r * T) * K * N2\n\ndef black_scholes_put(S, K, r, sigma, q, T):\n    \"\"\"\n    Inputs:\n    S = initial stock price\n    K = strike price\n    r = risk-free rate\n    sigma = volatility\n    q = dividend yield\n    T = time to maturity\n    \"\"\"\n    if sigma <= 0 or T <= 0:\n        return max(0, np.exp(-r * T) * K - np.exp(-q * T) * S)\n\n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    N1 = norm.cdf(-d1)\n    N2 = norm.cdf(-d2)\n    return np.exp(-r * T) * K * N2 - np.exp(-q * T) * S * N1\n```\n:::\n\n\n::: {#fig-bs-call-put} \n<iframe height=\"800\" width =\"720\" src=\"https://black-scholes-call-put.streamlit.app/?embed=true\"></iframe>\nBlack-Scholes Explorer\n:::\n\n## Greeks\n\n\n\n\n\nThe derivatives (calculus derivatives, not financial derivatives!) of an option pricing formula with respect to the inputs are commonly called Greeks.  \\index{Greeks} The most important Greek is  the option delta.  This measures the sensitivity of the option value to changes in the value of the underlying asset.  The following table shows the standard Greeks, with reference to the Black-Scholes pricing formula.\n\n\\begin{table}\n\\centering\n\\caption{Black-Scholes Greeks}\n\\begin{tabular}{lccccc}\n\\hline \\\\\n\\bfseries{Input} & \\bfseries{Input Symbol} & \\qquad &\\bfseries{Greek} & \\qquad & \\bfseries{Greek Symbol}\\\\\n\\hline \\\\\nStock price & $S$  &\\qquad& delta &\\qquad& $\\delta$ \\\\\n\\hline \\\\\ndelta & $\\delta$ &\\qquad& gamma&\\qquad & $\\Gamma$\\\\\n\\hline \\\\\n- Time to maturity  & $-T$&\\qquad& theta &\\qquad& $\\Theta$ \\\\\n\\hline \\\\\nVolatility & $\\sigma$&\\qquad& vega &\\qquad& $\\cal{V}$ \\\\\n\\hline \\\\\nInterest rate & $r$ &\\qquad& rho&\\qquad & $\\rho$\\\\\n\\hline\n\\end{tabular}\n\\end{table}\n\n\n| **Input**          | **Input Symbol** |       | **Greek**  |       | **Greek Symbol** |\n| ------------------ | ---------------- | ----- | ---------- | ----- | ---------------- |\n| Stock price        | $S$              |       | delta      |       | $\\delta$         |\n| delta              | $\\delta$         |       | gamma      |       | $\\Gamma$         |\n| - Time to maturity | $-T$             |       | theta      |       | $\\Theta$         |\n| Volatility         | $\\sigma$         |       | vega       |       | $\\cal{V}$        |\n| Interest rate      | $r$              |       | rho        |       | $\\rho$           |\n\n\nThe second line of the above shows $\\delta$ as an input.^[The delta is frequently denoted by the upper case $\\Delta$, but we will use the lower case, reserving the upper case for discrete changes, e.g., $\\Delta t$.  One may have noticed also that the symbol for vega is a little different from the others; this reflects the fact that  vega is not actually a Greek letter.]  Of course, it is not an input but instead is calculated.  Gamma, the derivative of $\\delta$, is the second derivative of the option price with respect to the underlying asset price.  The reason for calculating $\\Theta$ as the derivative with respect to $-T$ instead of $T$ is that the time-to-maturity $T$ decreasing ($-T$ increasing) is equivalent to time passing, so $\\Theta$ measures the change in the option value when time passes.  \n\nWe can calculate these from the Black-Scholes formula using the chain rule from differential calculus.  The derivative of the normal distribution function $\\mathrm{N}$ is the normal density function $\\mathrm{n}d$ defined as\n$$\\mathrm{n}d(d) = \\frac{1}{\\sqrt{2\\pi}}\\mathrm{e}^{-d^2/2}\\; .$$\nOne can easily verify directly that\n$$\n\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)=\\mathrm{e}^{-rT}K\\mathrm{n}d(d_2)\\;,\n$$ {#eq-greeksimplify}\n\nwhich simplifies the calculations for the Black-Scholes call option pricing formula. \nFor this formula, the Greeks are as follows:\n\\begin{align*}\n\\delta &= \\mathrm{e}^{-q T}\\mathrm{N}(d_1) + \\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\frac{\\partial d_1}{\\partial S} -\\mathrm{e}^{-rT}K\\mathrm{n}d(d_2)\\frac{\\partial d_2}{\\partial S}\\\\\n&= \\mathrm{e}^{-q T}\\mathrm{N}(d_1) + \\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\left(\\frac{\\partial d_1}{\\partial S}-\\frac{\\partial d_2}{\\partial S}\\right)\\\\\n&=\\mathrm{e}^{-q T}\\mathrm{N}(d_1)\\;,\\\\ \n\\Gamma &=\\mathrm{e}^{-q T}\\mathrm{n}d(d_1)\\frac{\\partial d_1}{\\partial S}= \\mathrm{e}^{-q T}\\mathrm{n}d(d_1)\\frac{1}{S\\sigma\\sqrt{T}}\\;,\n\\end{align*}\n\\begin{align*}\n \\Theta &=-\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\frac{\\partial d_1}{\\partial T} +q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1) \\\\\n&\\quad + \\mathrm{e}^{-rT}K\\mathrm{n}d(d_2)\\frac{\\partial d_2}{\\partial T} -r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\left(\\frac{\\partial d_2}{\\partial T}-\\frac{\\partial d_1}{\\partial T}\\right)\\\\\n&\\quad + q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1)-r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=-\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\frac{\\sigma}{2\\sqrt{T}}+ q \\mathrm{e}^{-q T}S\\mathrm{N}(d_1)-r\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;,\\\\\n \\cal{V}&=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\frac{\\partial d_1}{\\partial \\sigma} - \\mathrm{e}^{-rT}K\\mathrm{n}d(d_2)\\frac{\\partial d_2}{\\partial \\sigma}\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\left(\\frac{\\partial d_1}{\\partial \\sigma}-\\frac{\\partial d_2}{\\partial \\sigma}\\right)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\sqrt{T}\\;,\\\\\n \\rho &=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\frac{\\partial d_1}{\\partial r} - \\mathrm{e}^{-rT}K\\mathrm{n}d(d_2)\\frac{\\partial d_2}{\\partial r} +T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=\\mathrm{e}^{-q T}S\\mathrm{n}d(d_1)\\left(\\frac{\\partial d_1}{\\partial r}-\\frac{\\partial d_2}{\\partial r}\\right)+T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\\\\n&=T\\mathrm{e}^{-rT}K\\mathrm{N}(d_2)\\;.\n\\end{align*} \n\n\nWe can calculate the Greeks of a European put option from the call option Greeks and put-call parity:\n$$\\text{Put Price} = \\text{Call Price} +\\mathrm{e}^{-rT}K- \\mathrm{e}^{-q T}S_0\\; .$$\nFor example, the delta of a put is the delta of a call (with the same strike and maturity) minus $\\mathrm{e}^{-q T}$, and the gamma of a put is the same as the gamma of the corresponding call.\n\nTo see how the Greeks respond to changes in the various inputs to the Black-Scholes formula (e.g., interest rate ($r$), time to maturity ($T$) and volatility ($\\sigma$)), we encourage readers to interact with the plot below.  The code used for the calculations is here:\n\n::: {#a4f2f7d9 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.stats import norm\n\ndef d1(S, K, r, sigma, T):\n    \"\"\"\n    Computes d1 used in Black-Scholes.\n    \"\"\"\n    return (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n\ndef d2(S, K, r, sigma, T):\n    \"\"\"\n    Computes d2 used in Black-Scholes.\n    \"\"\"\n    return d1(S, K, r, sigma, T) - sigma * np.sqrt(T)\n\ndef call_price(S, K, r, sigma, T):\n    \"\"\"\n    Black-Scholes price for a call option.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    return S * norm.cdf(d_1) - K * np.exp(-r * T) * norm.cdf(d_2)\n\ndef put_price(S, K, r, sigma, T):\n    \"\"\"\n    Black-Scholes price for a put option.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    return K * np.exp(-r * T) * norm.cdf(-d_2) - S * norm.cdf(-d_1)\n\ndef greeks(S, K, r, sigma, T, option_type=\"call\"):\n    \"\"\"\n    Return the main Greeks for Black-Scholes.\n\n    Parameters\n    ----------\n    S : float or numpy array\n        Underlying price.\n    K : float\n        Strike price.\n    r : float\n        Risk-free interest rate.\n    sigma : float\n        Volatility.\n    T : float\n        Time to maturity (in years).\n    option_type : str\n        'call' or 'put'.\n    \"\"\"\n    d_1 = d1(S, K, r, sigma, T)\n    d_2 = d2(S, K, r, sigma, T)\n    pdf_d1 = norm.pdf(d_1)\n    cdf_d1 = norm.cdf(d_1)\n    cdf_d2 = norm.cdf(d_2)\n    \n    if option_type == \"call\":\n        # Delta\n        delta = cdf_d1\n        # Gamma (same for call & put)\n        gamma = pdf_d1 / (S * sigma * np.sqrt(T))\n        # Vega (same for call & put, but typically scaled by 0.01 if desired in %)\n        vega = S * pdf_d1 * np.sqrt(T)\n        # Theta\n        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \\\n                - r * K * np.exp(-r * T) * cdf_d2\n        # Rho\n        rho = K * T * np.exp(-r * T) * cdf_d2\n    else:  # put\n        # Delta\n        delta = cdf_d1 - 1\n        # Gamma (same for call & put)\n        gamma = pdf_d1 / (S * sigma * np.sqrt(T))\n        # Vega (same for call & put)\n        vega = S * pdf_d1 * np.sqrt(T)\n        # Theta\n        theta = - (S * pdf_d1 * sigma) / (2 * np.sqrt(T)) \\\n                + r * K * np.exp(-r * T) * norm.cdf(-d_2)\n        # Rho\n        rho = - K * T * np.exp(-r * T) * norm.cdf(-d_2)\n\n    return delta, gamma, vega, theta, rho\n```\n:::\n\n\n::: {#fig-bs-greeks} \n<iframe height=\"750\" width =\"720\" src=\"https://bs-greeks.streamlit.app/?embed=true\"></iframe>\nBlack-Scholes Greeks Explorer\n:::\n\n\n\n## Greeks and Delta Hedges {#sec-s:deltahedging}\n\nThe ability to create a fully hedged (risk-free) portfolio of the stock and an option is the essence of the arbitrage argument underlying the Black-Scholes formula, as we saw in @sec-c:arbitrage for the binomial model.  For a call option, such a portfolio consists of delta shares of the underlying asset and a short call option, or a short position of delta shares of the underlying and a long call option.  \\index{delta hedge} These portfolios have no instantaneous exposure to the price of the underlying.  To create a perfect hedge, the portfolio must be adjusted continuously, because the delta changes when the price of the underlying changes and when time passes.  In practice, any hedge will therefore be imperfect, even if the assumptions of the model are satisfied. \n\nWe first consider the continuous-time hedging argument.  Consider a European call option with maturity $T$, and let $C(S,t)$ denote the value of the option at date $t<T$ when the stock price is $S$ at date $t$.  Consider a portfolio that is short one call option and long $\\delta$ shares of the underlying asset and that has a (short) cash position equal to $C-\\delta S$.  This portfolio has zero value at date $t$.  \n\nThe change in the value of the portfolio in an instant $\\d  t$ is\n$$\n-\\d  C + \\delta \\d   S + q \\delta S\\d   t+(C-\\delta S)r\\d   t\\;.\n$$ {#eq-changeportfoliovalue}\n\nThe first term reflects the change in the value of the option, the second term is the capital gain or loss on $\\delta$ shares of stock, the third term is the dividends received on $\\delta$ shares of stock, and the fourth term is the interest expense on the short cash position.\n\nOn the other hand, we know from Ito's formula that\n\n$$\n\\d  C = \\frac{\\partial C}{\\partial S}\\d   S + \\frac{\\partial C}{\\partial t}\\d   t + \\frac{1}{2}\\frac{\\partial^2C}{\\partial S^2} (\\d  S)^2  \n$$\n$$\n= \\delta \\d   S + \\Theta \\d   t + \\frac{1}{2}\\Gamma \\sigma^2S^2\\d   t\\;.\n$$ {#eq-changeportfoliovalue2}\n\n\nSubstituting @eq-changeportfoliovalue2 into @eq-changeportfoliovalue shows that  the change in the value of the portfolio is\n$$\n-\\Theta \\d   t - \\frac{1}{2}\\Gamma \\sigma^2S^2\\d   t+ q \\delta S\\d   t+(C-\\delta S)r\\d   t\\;.\n$$ {#eq-hedgeprofits}\n\nSeveral aspects of this are noteworthy.  First, as noted earlier, the delta hedge (being long $\\delta$ shares of the underlying) eliminates the exposure to changes in the price of the underlying---there is no $\\d  S$ term in @eq-hedgeprofits.  Second, $\\Theta$ will be negative, because it captures the time decay in the option value; being short the option means the portfolio will profit from time decay at rate $-\\Theta$.  Third, this portfolio is short gamma.  We can also say it is short convexity, the term convexity \\index{convexity} referring to the convex shape of the option value as a function of the price of the underlying, which translates mathematically to a positive second derivative (gamma).  The volatility in the stock makes convexity valuable, and a portfolio that is short convexity will suffer losses.  Finally, the portfolio is earning dividends but paying interest.\n\nIt is straightforward to check, from the definitions of $\\Theta$, $\\Gamma$ and $\\delta$ in the preceding section, that\nthe sum of the terms in @eq-hedgeprofits is zero.  The time decay in the option value and dividends received on the shares of the underlying exactly offset the losses due to convexity and interest.\nTherefore, the delta hedge is a perfect hedge.  The portfolio, which has a zero cost, neither earns nor loses money.  This is true not only on average but for every possible change in the stock price.  \n\n## Discretely Rebalanced Delta Hedges \n\nA simple discrete strategy would rebalance at intervals $\\Delta t$.  The strategy calculates $N(d_1)$ at time 0 and holds $P(0,S_0)+S_0 - N(d_1)S_0$ dollars in the risk free asset and $N(d_1)$ shares of the asset.  Thereafter these holdings are adjusted.  The change in portfolio value over the interval $\\Delta t$ is \n$$\\Delta W= W_{i \\Delta t}- W_{(i-1)\\Delta t} $$\n$$ \n= (P((i-1)\\Delta t,S_{(i-1)\\Delta t})+S_{(i-1)\\Delta t} - N(d_1-)S_{(i-1)\\Delta t})(R_{i\\Delta t}-R_{(i-1)\\Delta t}) + N(d1-)(S_{i\\Delta t}-S_{(i-1)\\Delta t}) \n$$\nwhere $N(d1-)$ is the delta chosen at time $(i-1)\\Delta t$.  The question is if the Black Scoles model is correct, how accurate can a discrete rebalancing scheme be?  This is simulated in the following code:\n\n\n::: {#fig-discrete-hedge} \n<iframe height=\"1200\" width =\"720\" src=\"https://discrete-delta-hedge.streamlit.app/?embed=true\"></iframe>\nDiscretely Rebalanced Delta Hedge\n:::\n\n\n## Gamma Hedging {#sec-s:gammahedging}\n\nTo see how well this works with only discrete adjustments to the hedge, one can simulate the changes in $S$ over time and sum the gains and losses over discrete rebalancing periods.  One should input the actual (not risk-neutral) expected rate of return on the asset to compute the actual distribution of gains and losses.  \n\nTo attempt to improve the performance of a discretely rebalanced delta hedge, one can use another option to create a portfolio that is both delta and gamma neutral.  Being delta neutral means hedged as in the previous section---the portfolio value has no exposure to changes in the underlying asset price.  In other words, it means that the derivative of the portfolio value with respect to the price of the underlying (the portfolio delta) is zero.  Being gamma neutral means that the delta of the portfolio has no exposure to changes in the underlying price, which is equivalent to the second derivative of the portfolio value with respect to the price of the underlying (the portfolio gamma) being zero.  If the delta truly did not change, then there would be no need to rebalance continuously, and hence no hedging error introduced by only adjusting the portfolio at discrete times rather than continuously.   However, there is certainly no guarantee that a discretely-rebalanced delta/gamma hedge will perform better than a discretely rebalanced delta hedge.  \\index{gamma hedge}\n\nA delta/gamma hedge can be constructed as follows.  Suppose we have written (shorted) a call option and we want to hedge both the delta and gamma using the underlying asset and another option, for example, another call option with a different strike.  In practice, one would want to use a liquid option for this purpose, which typically means that the strike of the option will be near the current value of the underlying (i.e., the option used to hedge would be approximately at the money). \n\nLet $\\delta$ and $\\Gamma$ denote the delta and gamma of the written option and let $\\delta'$ and $\\Gamma'$ denote the delta and gamma of the option used to hedge.  Consider holding  $a$ of shares of the stock and $b$ units of the option used to hedge in conjunction with the short option.  The delta of the stock is one ($\\d  S/\\d  S = 1$), so to obtain a zero portfolio delta we need\n\n$$\n0 = - \\delta + a + b\\delta'.\n$$ {#eq-portfoliodelta}\n\nThe gamma of the stock is zero ($\\d ^2 S/\\d  S^2 = d\\,1/\\d  S = 0$), so to obtain a zero portfolio gamma we need\n\n$$\n0 = - \\Gamma + b\\Gamma'\\;. \n$$ {#eq-portfoliogamma}\n\n\n@eq-portfoliogamma shows that we should hold enough of the second option to neutralize the gamma of the option we have shorted; i.e.,\n$$\\\nb= \\frac{\\Gamma}{\\Gamma'}\n$$\n@eq-portfoliodelta shows that we should use the stock to delta hedge the portfolio of options; i.e.,\n$$\na=\\delta - \\frac{\\Gamma}{\\Gamma'}\\delta'\\;.\n$$\n\n## Portfolio Insurance \n\nThis procedure allows us to replicate the payoff of any European option even for those which might not be traded.  This observation had a profound effect on practice.  A particularly popular example is portfolio insurance.\n\nRecall, that a protective put position buys a put and buys a share and the payoff at the expiration of the put is given by $\\max(K,S_T)$.  The reason for the name protective put is apparent since the position can pay off no less than $K$.  The cost of this insurance is the price of the put.  However, if the put is not traded, we can synthetically replicate this payoff using the prodedure above assuming we can trade continuously.  The basic recipe is to start with inital wealth equal to that for a protective put position: $W_0 = P(0,S_0)+S_0$.  The delta of the protective put position can be calcuated to be the delta of the put plus 1 which is $N(d_1)$, where $d_1$ is calculated at each point in time.  However, in practice we cannot trade continuously.  \n\n## Monte-Carlo Approximation of Black-Scholes\n\n\n## Binomial Approximation of Black-Scholes\n\n\n\n## Implied Volatilities {#sec-s:impliedvolatility}\n\nAll of the inputs into the option pricing formulas are in theory observable, except for the volatility coefficient $\\sigma$.  We can estimate $\\sigma$ from historical data (see @sec-c:stochasticvolatility), or estimate it from the prices of other options.  The latter method exploits the fact that there is a one-to-one relationship between the price given by the Black-Scholes formula and the $\\sigma$ that is input, so one can take the price as given and infer $\\sigma$ from the formula. The $\\sigma$ computed in this way is called the implied volatility. \\index{implied volatility}  The implied volatility from one option can be used to price another (perhaps non-traded or less actively traded) option.  \n\n\nEven if we acknowledge that the model is not correct, the computation of implied volatilities is still useful for characterizing market prices, because we can quickly describe an option as expensive or cheap depending on whether its implied volatility is large or small.  Somewhat paradoxically, it is less easy to see if an option is expensive or cheap by looking at its price, because one must consider the price in the context of the exercise price and maturity.  To some extent, the implied volatility normalizes the price relative to the exercise price and maturity.  Of course, it does not always pay to sell expensive options or buy cheap options, unless they are expensive or cheap relative to an accurate model!\n\n\n\n## Term Structure of Volatility {#sec-s:timevaryingvolatility}\n\nThe option pricing formulas in this chapter are derived from the fact that the natural logarithm of the stock price at maturity is normally distributed with a certain mean (depending on the numeraire) and variance equal to $\\sigma^2T$.  It is not actually necessary that the volatility be constant.  The formulas are still valid if\n$$\\frac{\\d  S_t}{S_t}= \\mu_t\\d   t + \\sigma_t\\d   B_t$$\nwhere $\\sigma_t$ is some non-random function of time (and again $\\mu$ can be a quite general random process).  In this case, the variance of $\\log S_T$ will be\n$$\n\\int_0^T \\sigma^2_t\\d   t\\;,\n$$ {#eq-totalvariance}\n\nwhich is essentially the sum of the instantaneous variances $\\sigma^2_t\\d   t$.  In the $d_1$'s and $d_2$'s in the option pricing formulas, $\\sigma^2T$ should be replaced by @eq-totalvariance.  A convenient way of expressing this is as follows.  Let $\\sigma_{\\text{avg}}$ be the positive number such that\n$$\n\\sigma_{\\text{avg}}^2 = \\frac{1}{T}\\int_0^T \\sigma^2_t\\d   t\\;.\n$$ {#eq-sigmaavg100}\n\nThen we simply need to input $\\sigma_{\\text{avg}}$ as \\verb!sigma! in our option pricing functions.  We will call $\\sigma_{\\text{avg}}$ the average volatility, though note that it is not really the average of $\\sigma_t$ but instead is the square root of the average of $\\sigma^2_t$.\n\nIt is important to recognize that, throughout this chapter, date $0$ means the date at which the option is being valued.  It is not necessarily the date at which the option was first bought or sold.  So $\\sigma_{\\text{avg}}$ is the average (in a sense) volatility during the remaining lifetime of the option, which need not be the same as the average during the option's  entire lifetime.  It is this remaining volatility that is important for pricing and hedging.  Moreover, it is a mistake at date $0$ to use $\\sigma_0$ as the volatility to compute prices and hedges.  Instead, prices and hedges should be based on $\\sigma_{\\text{avg}}$.\n\nThese considerations provide a way to address the following situation.  If we compute implied volatilities for options with different maturities, we will normally get different numbers.  For example, consider two at-the-money  options with maturities $T_1$ and $T_2$ where $T_2>T_1$.  Denote the implied volatilities by $\\hat{\\sigma}_1$ and $\\hat{\\sigma}_2$.  We want to interpret these as average volatilities for the time periods $[0,T_1]$ and $[0,T_2]$ respectively.  This requires the existence of a function $\\sigma_t$ such that\n$$\\hat{\\sigma}_1^2 = \\frac{1}{T_1}\\int_0^{T_1} \\sigma^2_t\\d   t \\quad \\text{and} \\quad \\hat{\\sigma}_2^2 = \\frac{1}{T_2}\\int_0^{T_2} \\sigma^2_t\\d   t\\; .$$\nThis would imply\n$$\\hat{\\sigma}_2^2T_2 - \\hat{\\sigma}_1^2T_1 = \\int_{T_1}^{T_2} \\sigma^2_t\\d   t\\; ,$$\nwhich requires\n$$\\hat{\\sigma}_2^2T_2 - \\hat{\\sigma}_1^2T_1 \\geq 0\\; .$$\nEquivalently,\n$$\\hat{\\sigma}_2 \\geq \\sqrt{\\frac{T_1}{T_2}} \\hat{\\sigma}_1\\; .$$\nProvided this last inequality is satisfied, we can easily construct the function $\\sigma_t$ as\n$$\\sigma_t = \\begin{cases} \\hat{\\sigma}_1 & \\quad\\text{for $t\\leq T_1$} \\\\\n\\sqrt{\\frac{\\hat{\\sigma}_2^2T_2 - \\hat{\\sigma}_1^2T_1}{T_2-T_1}} &\\quad\\text{for $T_1 < t\\leq T_2$}.\n\\end{cases}\n$$\nMore generally, given a sequence of at-the-money options with maturities $T_1<T_2<\\cdots T_N$ and implied volatilities $\\hat{\\sigma}_1,\\dots,\\hat{\\sigma}_N$, we define\n$$\\sigma_t = \\sqrt{\\frac{\\hat{\\sigma}_{i+1}^2T_{i+1} - \\hat{\\sigma}_i^2T_i}{T_{i+1}-T_i}}$$\nfor $T_i<t\\leq T_{i+1}$, provided the expression inside the square root symbol is positive. This $\\sigma_t$ is often called the term structure of (implied) volatilities.  \\index{term structure of volatility} Generally, we may expect $\\sigma_t$ to be a decreasing function of time $t$ when the current market is especially volatile and to be an increasing function when the current market is especially quiet.  \n\n## Smiles and Smirks {#sec-s:smiles}\nIf we compute implied volatilities for options  with the same maturity but different strikes, we will again obtain different implied volatilities for different options.  If we plot implied volatility against the strike, the pattern one normally sees for equities and equity indices is the implied volatility declining as the strike increases until the strike is somewhere near the current value of the underlying (so the option is at the money).  The implied volatility will then generally flatten out or increase slightly at higher strikes.  The graph looks like a twisted smile (smirk).  \\index{smile} \\index{smirk} This pattern has been very pronounced in equity index option prices since the crash of 1987.  In contrast to the term structure of implied volatilities, this moneyness structure of implied volatilities is simply inconsistent with the model.  It suggests that the risk-neutral return distribution is not lognormal but instead exhibits a higher likelihood of extreme returns than the lognormal distribution (i.e., it has fat tails) with the likelihood of extreme negative returns being higher than the likelihood of extreme positive returns (i.e., it is skewed).  We will return to this subject in @sec-s:smilesagain.\n\n\n\n\n\n\n\n\n\n\n\n## Example: Replicating Portfolios and Simulating Portfolio Insurance\n\nAnother derivation of the Black Scholes formula is provided by Merton.  He asked  whether the payoff to a European call option can be replicated by trading the stock and the risk free asset.  Let $\\theta_t$ be the number of shares of the stock held at time $t$ and $\\alpha_t$ the number of shares of an initial investment of one dollar in the risk free asset.   Then the portfolio is worth $\\alpha_t R_t + \\theta_t S_t$ where $R_t= e^{rt}$ is the time $t$ value of an initial time $0$ investment of one dollar in the risk free asset. The portfolio should start with an initial value, should not have any cash inflows or outflows and have a terminal value equal to a call payoff so the changes in value are completely dictated by the changes in the value of the assets.  That is, assuming continuous trading,\n$$  d W_t = \\theta_t d S_t + \\alpha_t  d R_t = \\theta_t \\left(\\mu S_t dt + q S_t dt + \\sigma S_t d B_t\\right)  + \\alpha_t r R_t dt$$\nwith terminal condition \n$$ W_T = \\alpha_T R_T + \\theta_T S_T = (S_T - K)^{+} $$\nThe problem is to find $\\theta_t$ and $\\alpha_t$ for all times and states.  If we can accomplish this, then by `no-arbitrage' the call price must be the value of the initial investment.  Assume the call price is a function of the stock price and time: $C(t,S_t)$.  Then by Ito's Lemma\n$$ d C(t,S_t) = \\left(\\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (\\mu-q) S_t + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2 \\right) dt + \\frac{\\partial C}{\\partial S} \\sigma S_t dB_t $$\nIt should be apparent that we want to hold $\\theta = \\frac{\\partial C}{\\partial S}$, which is the delta of the call option.  By doing so, we match the diffusion term in thw change in wealth and the change in the call option.  Then matching the drift terms in both expressions\n$$ \\frac{\\partial C}{\\partial S} \\mu S_t + \\alpha_t r R_t = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (\\mu-q) S_t + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwhich can be solved to give\n$$ \\alpha_t r R_t=r \\left(W_t -\\frac{\\partial C}{\\partial S} S_t\\right)  = \\frac{\\partial C}{\\partial t}-\\frac{\\partial C}{\\partial S} q S_t  + \\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwhich gives the equation\n$$r W_t = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S}(r-q) S_t+\\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S_t^2$$\nwith a boundary condition $W_T = (S_T-K)^{+}$.  However, no-arbitrage suggests $W_t = C(t,S_t)$ which gives us the partial differential equation\n$$r C = \\frac{\\partial C}{\\partial t} + \\frac{\\partial C}{\\partial S} (r-q) S+\\frac{1}{2} \\frac{\\partial^2 C}{\\partial S^2} \\sigma^2 S^2$$\nwith a boundary condition $C(T,S_T)= (S_T - K)^{+}$.  This is a partial differential equation and a fairly tedious set of calcuations show the Black Scholes formula is a solution (in fact it is the only positive solution).  Close observation of the right hand side we see this is the drift term of Ito expansion for $C$ if we work in the risk-neutral probability.  The right hand side then says in the risk-neutral probability, the call option earns the risk free return.\n\nHowever, there is nothing special about a call option.  The same argument will apply for any European style option.  The only difference is the boundary condition.  This procedure allows us to replicate the payoff of any European option even for those which might not be traded.  This observation had a profound effect on practice.  A particularly popular example is portfolio insurance.\n\nRecall, that a protective put position buys a put and buys a share and the payoff at the expiration of the put is given by $\\max(K,S_T)$.  The reason for the name protective put is apparent since the position can pay off no less than $K$.  The cost of this insurance is the price of the put.  However, if the put is not traded, we can synthetically replicate this payoff using the prodedure above assuming we can trade continuously.  The basic recipe is to start with inital wealth equal to that for a protective put position: $W_0 = P(0,S_0)+S_0$.  The delta of the protective put position can be calcuated to be the delta of the put plus 1 which is $N(d_1)$, where $d_1$ is calculated at each point in time.  However, in practice we cannot trade continuously.  A simple discrete strategy would rebalance at intervals $\\Delta t$.  The strategy calculates $N(d_1)$ at time 0 and holds $P(0,S_0)+S_0 - N(d_1)S_0$ dollars in the risk free asset and $N(d_1)$ shares of the asset.  Thereafter these holdings are adjusted.  The change in portfolio value over the interval $\\Delta t$ is \n$$\\Delta W= W_{i \\Delta t}- W_{(i-1)\\Delta t} $$\n$$ \n= (P((i-1)\\Delta t,S_{(i-1)\\Delta t})+S_{(i-1)\\Delta t} - N(d_1-)S_{(i-1)\\Delta t})(R_{i\\Delta t}-R_{(i-1)\\Delta t}) + N(d1-)(S_{i\\Delta t}-S_{(i-1)\\Delta t}) \n$$\nwhere $N(d1-)$ is the delta chosen at time $(i-1)\\Delta t$.  The question is if the Black Scoles model is correct, how accurate can a discrete rebalancing scheme be?  This is simulated in the following code:\n\n::: {#20ca0c9d .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n# from bsfunctions import *\nimport matplotlib.pyplot as plt\nimport time\nfrom math import pow, exp, sqrt\nfrom scipy import stats\n# incs = np.genfromtxt('incs.csv',delimiter=\",\",skip_header=1)\ndef blackscholes(S0, K, r, q, sig, T, call = True):\n    '''Calculate option price using B-S formula.\n\n    Args:\n        S0 (num): initial price of underlying asset.\n        K (num): strick price.\n        r (num): risk free rate.\n        q (num): dividend yield\n        sig (num): Black-Scholes volatility.\n        T (num): maturity.\n        call (bool): True returns call price, False returns put price.\n\n    Returns:\n        num\n    '''\n    d1 = (np.log(S0/K) + (r -q + sig**2/2) * T)/(sig*np.sqrt(T))\n    d2 = d1 - sig*np.sqrt(T)\n#     norm = sp.stats.norm\n    norm = stats.norm\n    if call:\n        return np.exp(-q*T)*S0 * norm.cdf(d1,0,1) - K * np.exp(-r * T) * norm.cdf(d2,0, 1)\n    else:\n        return np.exp(-q*T)*S0 * -norm.cdf(-d1,0,1) + K * np.exp(-r * T) * norm.cdf(-d2,0, 1)\n\ndef blackscholes_delta(S0, K, r, q, sig, T, call = True):\n    '''Calculate option price using B-S formula.\n\n    Args:\n        S0 (num): initial price of underlying asset.\n        K (num): strick price.\n        r (num): risk free rate.\n        q (num): dividend yield\n        sig (num): Black-Scholes volatility.\n        T (num): maturity.\n        call (bool): True returns call price, False returns put price.\n\n    Returns:\n        num\n    '''\n    d1 = (np.log(S0/K) + (r -q + sig**2/2) * T)/(sig*np.sqrt(T))\n    d2 = d1 - sig*np.sqrt(T)\n#     norm = sp.stats.norm\n    norm = stats.norm\n    if type(call) == bool:\n        if call:\n            return np.exp(-q*T)*norm.cdf(d1,0,1)\n        else:\n            return np.exp(-q*T)*norm.cdf(-d1,0,1)\n    else:\n        print(\"Not a valid value for call\")\n\n# parameters\n# number of paths\n# n = incs.shape[1]\nn = 100000\n# number of divisions\n# m = incs.shape[0]\nm = 100\n# interest rate\nr = .1\n# dividend yield\nq=0.0\n# true drift\nmu = .15\n# volatility\nsig = .2\n# Initial Stock Price\nS0 = 42\n# Strike Price\nK = 42\n# Maturity\nT = 0.5\n\n\n# seed for random generator\nseed= 1234\n# define a random generator\nrg = np.random.RandomState(seed)\n# initialize\n\n\n# generate normal random vairables\ndt= T/m\nvol=sig*np.sqrt(dt)\nincs = rg.normal(0,vol,[m,n])\n\n\ntline = np.linspace(0,T,m+1)\n\n\nSt = np.zeros((m+1,n))\n#St1 = np.zeros((m+1,n))\n\nV_vec = np.zeros((m+1,n))\n\ndelta = np.zeros((m,n))\n\nput= blackscholes(S0,K,r, q, sig,T,call=False)\n\nincs_cumsum =  np.concatenate((np.zeros((1,n)),incs),axis=0).cumsum(axis=0)\nV_vec = np.zeros((m+1,n))\nt_mat =  np.repeat(tline.reshape((m+1,1)), n, axis=1)\ndrift_cumsum = (mu -q -0.5*sig**2) * t_mat\n\nSt = S0 * np.exp(incs_cumsum + drift_cumsum)\n\ndelta = blackscholes_delta(St[:-1,:],K,r, q, sig,T-t_mat[:-1,:])\n\nV_vec[0,:] = S0 + put\n\nfor i in range(1,m+1):\n    V_vec[i,:] = V_vec[i-1,:] + (np.exp(r*dt)-1) * (V_vec[i-1,:] - delta[i-1,:] * St[i-1,:])+ delta[i-1,:] * (St[i,:]-St[i-1,:])\n\n# Uses actual simulated changes in riskfree and stock price not the dt and dB approximations \n# plot ST versus VT\nplt.scatter(St[m,:],V_vec[m,:])\nplt.xlabel('Stock Price at Maturity')\nplt.ylabel('Value of Portfolio Insurance')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Chapter_BlackScholes_files/figure-html/cell-5-output-1.png){width=585 height=282}\n:::\n:::\n\n\nWith $m=100$ rebalancing dates over $T=0.5$ for the parameters chosen the repliacting strategy does a pretty good job.  The hedging errors occur when the stock price is close to the strike price.  This is not surprising since the delta changes (measured by the gamma) fastest around this point.  A gamma hedge would potentially improve the performance.\n\nThe portfolio insurance rebalancing scheme involves sell stock and buying bonds when the stock price goes down and buying stocks and selling bonds when the stock price goes up.  This can be destabilizing and was identified as a contributor to the 1987 stock market crash.\n\n\n### Discretely-Rebalanced Delta Hedges\nTo compute the real-world distribution of gains and losses from a discretely-rebalanced delta hedge, we input the expected rate of return $\\mu$.  We consider adjusting the hedge at dates $0=t_0<t_1<\\cdots<t_N=T$, with $t_i-t_{i-1}=\\Delta t = T/N$ for each $i$.  The changes in the natural logarithm of the stock price between successive dates $t_{i-1}$ and $t_i$ are simulated as\n$$\\Delta \\log S = \\left(\\mu-q-\\frac{1}{2}\\sigma^2\\right)\\,\\Delta t + \\sigma\\,\\Delta B\\; ,$$\nwhere $\\Delta B$ is normally distributed with mean zero and variance $\\Delta t$.  The random variables $\\Delta B$ are simulated as standard normals multiplied by\n$\\sqrt{\\Delta t}$.  We begin with the portfolio that is short a call, long $\\delta$ shares of the underlying, and short $\\delta S-C$ in cash.  After the stock price changes, say from $S$ to $S'$, we compute the new delta $\\delta'$.  The cash flow from adjusting the hedge is $(\\delta-\\delta')S'$.  Accumulation (or payment) of interest on the cash position is captured by the factor $e^{r\\Delta t}$.  Continuous payment of dividends is modelled similarly: the dividends earned during the period $\\Delta t$ is taken to be $\\delta S\\left(e^{q\\Delta t}-1\\right)$.  The cash position is adjusted due to interest, dividends, and the cash flow from adjusting the hedge.  At date $T$, the value of the portfolio is the cash position less the intrinsic value of the option.\n\nTo describe the distribution of gains and losses, we compute percentiles of the distribution.  You should see that the hedge becomes more nearly perfect as the number of periods $N$ is increased.  Note that this is true regardless of the $\\mu$ that is input, which reaffirms the point that option values and hedges do not depend on the expected rate of return of the underlying. \n\n\n\n## {.unnumbered}\n\n::: {#exr-problem4.1}\n  Create a Python code which inputs $K$, $r$, $\\sigma$, $q$ and $T$.  Compute the delta of a call option \nfor stock prices $S = .01K$, $.02K$, \\ldots, $1.99K$, $2K$ (i.e., $S = iK/100$ for $i=1, \\ldots 200$) and plot the delta against the stock price.  \n:::\n\n::: Exercise\n The delta of a digital option that pays \\$1 when $S_T>K$ is \n$$\\frac{\\mathrm{e}^{-rT}\\mathrm{n}d(d_2)}{\\sigma S\\sqrt{T}}\\; .$$\nRepeat  the previous problem for the delta of this digital.  Given that in reality it is costly to trade (due to commissions, the bid-ask spread and possible adverse price impacts for large trades), do you see any problems with delta hedging a short digital near maturity if it is close to being at the money?\n:::\n\n::: Exercise\nModify the  Python code for replicating portfolio insurance to simulate a discrete replication of a digital option using the delta in the previous problem.  Run the code for $10,20,100,1000$ rebalancing dates.  When does the strategy do a good job and when does it fail? \n::: \n\n::: Exercise\n Repeat @exr-problem4.1 for the gamma of a call option.\n:::\n::: Exercise\n Use put-call parity to derive the Greeks of a put option, and write a Python function that computes the value and Greeks.\n::: \n::: Exercise\n Consider delta and gamma hedging a short call option, using the underlying and a put with the same strike and maturity as the call.  Calculate the position in the underlying and the put that you should take, using the analysis in @sec-s:gammahedging.  Will you ever need to adjust this hedge?  Relate your result to put-call parity.\n:::\n\n::: Exercise\n The delta of a share digital that pays one share when $S_T>K$ is \n$$\\mathrm{e}^{-qT}\\mathrm{N}(d_1) + \\frac{\\mathrm{e}^{-qT}\\mathrm{n}d(d_1)}{\\sigma \\sqrt{T}}\\; .$$\nRepeat @exr-problem4.1 for the delta of this share digital.\n:::\n::: Exercise\n Compute the value of an at-the-money call option ($S=K$) using the Python code for volatilities $\\sigma = .01, .02, \\ldots, 1.0$.  Plot the call value against the volatility.\n:::\n::: Exercise\n Repeat the previous problem for  $S=1.2K$ (an example of an in-the-money call option).\n:::\n::: Exercise\n The file CBO\\\\EQuotes.txt (available at \\verb!www.kerryback.net!) contains price data for call options on the S\\&P 500 index.  The options expired in February, 2003, and the prices were obtained on January 22, 2003.  The first column lists various exercise prices.  The second column gives the bid price and the third column the ask price.  Import this data into a Python program and compute and plot the implied volatility against the exercise price using this data.  Use the ask price as the market price for the option.    The options have 30 days to maturity (so $T=30/365$).  At the time the quotes were downloaded, the S\\&P 500 was at 884.25.  According to the CBO\\\\E, the dividend yield on the S\\&P 500 was 1.76\\%.  Use 1.25\\% for the risk-free interest rate.  \n\n:::\n::: Exercise\n Attempt to repeat the previous problem using the bid price as the market price of the option.  If this doesn't work, what is wrong?  Does this indicate there is an arbitrage opportunity?\n\n:::\n::: Exercise\n Suppose an investor invests in a portfolio with price $S$ and constant dividend yield $q$.  Assume the investor is charged a constant expense ratio $\\alpha$ (which acts as a negative dividend) and at date $T$ receives either his portfolio value or his initial investment, whichever is higher.  This is similar to a popular type of variable annuity.  Letting $D$ denote the number of dollars invested in the contract, the contract pays\n$$\n\\max\\left(D,\\frac{D\\mathrm{e}^{(q-\\alpha)T}S_T}{S_0}\\right)\n$$ {#eq-bsp1}\nat date $T$.  \nWe can rearrange the expression @eq-bsp1 as\n\n$$\n\\max\\left(D,\\frac{D\\mathrm{e}^{(q-\\alpha)T}S_T}{S_0}\\right) = D + \\max\\left(0, \\frac{D\\mathrm{e}^{(q-\\alpha)T}S_T}{S_0}-D\\right)\n$$\n$$\n= D + \\mathrm{e}^{-\\alpha T}D\\max\\left(0,\\frac{\\mathrm{e}^{qT}S_T}{S_0}-\\mathrm{e}^{\\alpha T}\\right)\\;.\n$$ {#eq-bsp2}\n\n\nThus, the contract payoff is equivalent to the amount invested plus a certain number of call options written on the gross holding period return $\\mathrm{e}^{qT}S_T/S_0$.  Note that $Z_t = \\mathrm{e}^{qt}S_t/S_0$ is the date--$t$ value of the portfolio that starts with $1/S_0$ units of the asset (i.e., with a \\$1 investment) and reinvests dividends.  Thus, the call options are call options on a dividend-reinvested portfolio with the same volatility as $S$ and initial price of \\$1.  This implies that the date--0 value of the contract to the investor is $\\mathrm{e}^{-rT}D$ plus \n\n$e^{-\\alpha*T}*D*$`Black_Scholes_Call`$(1,e^{-\\alpha*T},r,sigma,q,T)$\n\n\n\n1. Create a Python function  to compute the fair expense ratio; i.e., find $\\alpha$ such that the date--0 value of the contract is equal to $D$.  Hint:  Modify the\n\n```Black_Scholes_Call_Implied_Vol``` \n\nfunction.  You can use $\\alpha=0$ as a lower bound.  Because the value of the contract is decreasing as $\\alpha$ increases, you can find an upper bound by iterating until the value of the contract is less than $D$.\n2.  How does the fair expense ratio vary with the maturity $T$?  Why?\n\n\n\n:::\n::: Exercise\n Modify the function `Simulated_Delta_Hedge_Profit` to compute percentiles of gains and losses for an investor who writes a call option and constructs a delta and gamma hedge using the underlying asset and another call option. Include the exercise price of the call option used to hedge as an input, and assume it has the same time to maturity as the option that is written.  Hint:  In each period \\verb!j = 1 to N-1!, the updated cash position can be calculated as\n\n``` Cash = exp(r*dt)*Cash + a*S*(exp(q*dt)-1) - (Newa-a)*NewS - (Newb-b)*PriceHedge,```\nwhere `a` denotes the number of shares of the stock held, `b` denotes the number of units held of the option that is used for hedging, and `PriceHedge` denotes the price of the option used for hedging (computed from the Black-Scholes formula each period).  This expression embodies the interest earned (paid) on the cash position, the dividends received on the shares of stock and the cash inflows (outflows) from adjusting the hedge.  At the final date `N`, the value of the hedge is\n\n```exp(r*dt)*Cash + a*S*(exp(q*dt)-1) + a*NewS + b*np.max(NewS-KHedge,0),```\n\nand the value of the overall portfolio is the value of the hedge less\n```np.max(NewS-KWritten,0),```\nwhere `KHedge` denotes the strike price of the option used to hedge and `KWritten` denotes the strike of the option that was written.\n:::\n\n",
    "supporting": [
      "Chapter_BlackScholes_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}