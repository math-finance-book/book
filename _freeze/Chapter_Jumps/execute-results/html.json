{
  "hash": "5d07f4c5c7031909dc425697447be4d5",
  "result": {
    "engine": "jupyter",
    "markdown": "\\newcommand{\\d}{\\,\\mathrm{d}}\n\\newcommand{\\e}{\\mathrm{e}}\n\\newcommand{\\E}{\\mathbb{E}}\n\n\n\n# Jumps {#sec-c:jumps} \n\n::: {#9a9170d3 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_SVG\"></script>\n```\n:::\n:::\n\n\nIn the classical Black-Scholes model, stock prices are assumed to follow a geometric Brownian motion, which is characterized by continuous paths and normally distributed returns. While this model has been widely used due to its simplicity and analytical tractability, it fails to capture certain empirical phenomena observed in financial markets, such as sudden and significant price changes (jumps) and the heavy tails of return distributions.\n\nTo address these shortcomings, the jump diffusion model was introduced by Robert C. Merton in 1976. This model extends the Black-Scholes framework by incorporating jumps into the stock price dynamics, thereby allowing for discontinuous price paths. The jump diffusion model is better suited to describe the behavior of financial assets that exhibit sudden price changes due to news, earnings announcements, or other market events.\n\nIn a jump diffusion model, the stock price $S_t$ is governed by the following stochastic differential equation (SD\\\\E):\n\n$$\ndS_t = \\mu S_t \\, dt + \\sigma S_t \\, dW_t + S_t \\, dJ_t\n$$\n\nwhere $\\mu$ is the drift rate, $\\sigma$ is the volatility, $B_t$ is a standard Brownian motion, $J_t$ is a jump process.\n\nThe jump process $J_t$ is typically modeled as a compound Poisson process:\n\n$$\nJ_t = \\sum_{i=1}^{N_t} (Y_i - 1)\n$$\n\nwhere $N_t$ is a Poisson process with intensity $\\lambda$, $Y_i$ are i.i.d. random variables representing the relative jump sizes, with $Y_i - 1$ being the actual jump size.\n\nThe jump diffusion model introduces several important implications for the behavior of stock prices and the pricing of derivative securities:\n\n1. **Heavy Tails**: The inclusion of jumps leads to a return distribution with heavier tails compared to the normal distribution, aligning better with empirical observations.\n2. **Volatility Smile**: The model can generate implied volatility smiles, where implied volatility varies with strike price and maturity, a feature commonly observed in market data.\n3. **Risk Management**: Understanding the jump component is crucial for risk management, as it affects the likelihood of extreme price movements and the potential for large losses.\n\nThe following python code simulates the stock price that evolves as a jump diffusion. \n\n::: {#cell-Simulate_Jump_Diffusion .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef simulate_jump_diffusion(S0, mu, sigma, lamb, m, delta, T, N):\n    \"\"\"\n    Simulate a jump diffusion process.\n    \n    Parameters:\n    S0     : float - initial stock price\n    mu     : float - drift rate\n    sigma  : float - volatility\n    lamb   : float - intensity of the Poisson process\n    m      : float - mean of the jump size distribution\n    delta  : float - standard deviation of the jump size distribution\n    T      : float - total time\n    N      : int   - number of time steps\n    \n    Returns:\n    t      : numpy array - time points\n    S      : numpy array - simulated stock prices\n    \"\"\"\n    dt = T / N\n    t = np.linspace(0, T, N + 1)\n    S = np.zeros(N + 1)\n    S[0] = S0\n    \n    for i in range(1, N + 1):\n        Z = np.random.normal(0, 1)  # Normal random variable for the diffusion part\n        J = np.random.poisson(lamb * dt)  # Poisson random variable for jumps\n        \n        # Sum of log-normal distributed jumps\n        Y = np.sum(np.random.normal(m, delta, J))\n        \n        # Update stock price\n        S[i] = S[i - 1] * np.exp((mu - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * Z + Y)\n    \n    return t, S\n\n# Parameters\nS0 = 100         # Initial stock price\nmu = 0.1         # Drift rate\nsigma = 0.2      # Volatility\nlamb = 0.75      # Intensity of the Poisson process (average number of jumps per unit time)\nm = 0.02         # Mean of the jump size distribution (log-normal)\ndelta = 0.1      # Standard deviation of the jump size distribution (log-normal)\nT = 1.0          # Total time (1 year)\nN = 1000         # Number of time steps\n\n# Simulate the jump diffusion process\nt, S = simulate_jump_diffusion(S0, mu, sigma, lamb, m, delta, T, N)\n\n# Plot the simulated stock prices\nplt.figure(figsize=(10, 6))\nplt.plot(t, S, label='Jump Diffusion Process')\nplt.title('Simulated Stock Price using Jump Diffusion Model')\nplt.xlabel('Time (years)')\nplt.ylabel('Stock Price')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Chapter_Jumps_files/figure-html/simulate_jump_diffusion-output-1.png){#simulate_jump_diffusion width=816 height=523}\n:::\n:::\n\n\nThe jump diffusion model offers a more realistic framework for modeling stock prices by incorporating the possibility of sudden jumps. This enhancement over the classical Black-Scholes model allows for better capturing the empirical characteristics of financial markets, thereby improving the accuracy of option pricing and risk management practices.\n\n\n## Smiles and Smirks Again {#sec-s:smilesagain}\n\nAs mentioned before, the GARCH, stochastic volatility and jump diffusion models can generate  fat-tailed distributions for the asset price $S_T$.  Thus, they can be more nearly consistent with the option smiles \\index{smile}discussed in @sec-s:smiles than is the Black-Scholes model (though it appears that one must include jumps in asset prices as well as stochastic volatility in order to duplicate market prices with an option pricing formula).  To understand the relation, let $\\sigma_\\text{am}$ denote the implied volatility from an at-the-money call option, i.e., a call option with strike $K=S_0$.  The characteristic of a smile is that implied volatilities from options of the same maturity with strike prices significantly above and below $S_0$ are higher than $\\sigma_\\text{am}$.  \n\nA strike price higher than $S_0$  corresponds to an out-of-the money call option.  The high implied volatility means that the market is pricing the right to buy at $K>S_0$ above the Black-Scholes price computed from the volatility $\\sigma_\\text{am}$; thus, the market must attach a higher probability to stock prices $S_T>S_0$ than the  volatility $\\sigma_\\text{am}$ would suggest.  \n\nA strike price lower than $S_0$ corresponds to an in-the-money call option.  The put option with the same strike is out of the money.  The high implied volatility means that the market is pricing call options  above the Black-Scholes price computed from the volatility $\\sigma_\\text{am}$.  By put-call parity, the market must also be pricing put options above the Black-Scholes price computed from the  volatility $\\sigma_\\text{am}$.  The high prices for the rights to buy and sell at $K<S_0$ means that the market must attach a higher probability to stock prices $S_T<S_0$ than the volatility $\\sigma_\\text{am}$ would suggest.  In particular, the high price for the right to sell at $K<S_0$ means a high insurance premium for owners of the asset who seek to insure their positions, which is consistent with a market view that there is a significant probability of a large loss.  This can be interpreted as a crash premium.  \\index{crash premium} Indeed, the implied volatilities at strikes less than $S_0$  are typically higher than the implied volatilities at strikes above $S_0$ (giving the smile the appearance of a smirk, as discussed in @sec-s:smiles), which is consistent with a larger probability of crashes than of booms (a fatter tail for low returns than for high).\n\nAs an example, the following code shows that the stochstic volatility model can generate implied volatility smiles. \n\nThis program involes (1) Simulating Heston Model: simulate_heston_paths function generates stock price paths using the Heston model parameters. (2) Calculating call price by discounting the averaged call payoffs across the stock price sample paths (3) Calculating Black Scholes call price : black_scholes_call_price function calculates the call option price using the Black-Scholes formula.\n(4) Calculating implied volatility: implied_volatility function computes the implied volatility by solving for the volatility that matches the Black-Scholes call price to the simulated call price. (5) Repeating Steps (2)-(4) for different strik prices. (6) Plotting the implied volatility against strike prices fixing the initial stock price at \\$100.   \n\n::: {#1e365b8b .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom scipy.optimize import brentq\n\n# Heston model parameters\nS0 = 100      # Initial stock price\nV0 = 0.04     # Initial variance\nr = 0.05      # Risk-free rate\nq = 0.01      # Dividend yield\nT = 1         # Time to maturity (in years)\nkappa = 0.25   # Rate of mean reversion of variance\ntheta = 0.04  # Long-term variance\nsigma = 0.5   # Volatility of variance\nrho = -0.2    # Correlation between the two Wiener processes\ndt = 1/252    # Length of each time period (daily)\nN = 252       # Number of time periods (one year)\nn_simulations = 10000  # Number of simulations\n\ndef simulate_heston_paths(S0, V0, r, q, T, kappa, theta, sigma, rho, dt, N, n_simulations):\n    S = np.zeros((N + 1, n_simulations))\n    V = np.zeros((N + 1, n_simulations))\n    S[0] = S0\n    V[0] = V0\n    \n    for t in range(1, N + 1):\n        Z1 = np.random.normal(size=n_simulations)\n        Z2 = np.random.normal(size=n_simulations)\n        W1 = Z1\n        W2 = rho * Z1 + np.sqrt(1 - rho**2) * Z2\n        \n        V[t] = np.maximum(V[t-1] + kappa * (theta - V[t-1]) * dt + sigma * np.sqrt(V[t-1] * dt) * W2, 0)\n        S[t] = S[t-1] * np.exp((r - q - 0.5 * V[t-1]) * dt + np.sqrt(V[t-1] * dt) * W1)\n    \n    return S, V\n\ndef black_scholes_call_price(S, K, T, r, sigma):\n    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    call_price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n    return call_price\n\ndef implied_volatility(C, S, K, T, r):\n    def objective_function(sigma):\n        return black_scholes_call_price(S, K, T, r, sigma) - C\n    try:\n        return brentq(objective_function, 0.001, 5.0)\n    except ValueError:\n        return np.nan\n\n# Simulate paths using the Heston model\nS_paths, _ = simulate_heston_paths(S0, V0, r, q, T, kappa, theta, sigma, rho, dt, N, n_simulations)\n\n# Calculate option prices at different strike prices\nstrike_prices = np.linspace(90, 120, 20)\ncall_prices = np.zeros_like(strike_prices)\n\nfor i, K in enumerate(strike_prices):\n    call_payoffs = np.maximum(S_paths[-1] - K, 0)\n    call_prices[i] = np.mean(call_payoffs) * np.exp(-r * T)\n\n# Calculate implied volatilities\nimplied_vols = [implied_volatility(C, S0, K, T, r) for C, K in zip(call_prices, strike_prices)]\n\n# Filter out NaN values that may occur\nvalid_indices = ~np.isnan(implied_vols)\nstrike_prices = strike_prices[valid_indices]\nimplied_vols = np.array(implied_vols)[valid_indices]\n\n# Plot the implied volatility smile\nplt.figure(figsize=(10, 6))\nplt.plot(strike_prices, implied_vols, label='Implied Volatility', marker='o')\nplt.title('Implied Volatility Smile')\nplt.xlabel('Strike Price')\nplt.ylabel('Implied Volatility')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Chapter_Jumps_files/figure-html/cell-4-output-1.png){width=829 height=523}\n:::\n:::\n\n\n## {.unnumbered}\n\n::: {#exr-e_mixture}\n  The purpose of this exercise is to generate a fat-tailed distribution from a model that is simpler than the GARCH and stochastic volatility models but has somewhat the same flavor.  The distribution will be a mixture of normals. Create a python program in which the user can input $S$, $r$, $q$, $T$, $\\sigma_1$ and $\\sigma_2$.  Use these inputs to produce a column of 500 simulated $\\log S_T$.  In each simulation, define $\\log S_T$ as\n$$\\log S_T = \\log S_0 + \\left(r-q-\\frac{1}{2}\\sigma^2\\right)T + \\sigma \\sqrt{T}z\\;,$$\nwhere $z$ is a standard normal,\n$\\sigma = x\\sigma_1 + (1-x)\\sigma_2$,\nand $x$ is a random variable that equals zero or one with equal probabilities.  \n\nCalculate the mean and standard deviation of the $\\log S_T$ and calculate the fraction that lie more than two standard deviations below the mean.  If the $\\log S_T$ all came from a normal distribution with the same variance, then this fraction should equal $\\mathrm{N}(-2) =$ 2.275\\%.  If the fraction is higher, then the distribution is fat tailed.  (Of course, the actual fraction would differ from 2.275\\% in any particular case due to the randomness of the simulation, even if all of the $\\log S_T$ came from a normal distribution with the same variance).\n:::\n\n::: {#exr-e_GARCH1}\n  Create a python program prompting the user to input the same inputs as in the `simulating_garch` function except for the initial volatility and $\\theta$.  Simulate 500 paths of a GARCH process and output $\\log S_T$ for each simulation (you don't need to output the entire paths as in the `simulating_garch` function).  Take the initial volatility to be 0.3 and $\\theta = 0.09$.  Determine whether the distribution is fat-tailed by computing the fraction of the $\\log S_T$ that lie two or more standard deviations below the mean, as in the previous exercise.  For what values of $\\kappa$ and $\\lambda$ does the distribution appear to be especially fat-tailed? \n:::\n::: Exercise\n Repeat @exr-e_GARCH1 for the Heston stochastic volatility model, describing the values of $\\kappa$,  $\\gamma$ and $\\rho$ that appear to generate especially fat-tailed distributions.\n\n:::\n\n",
    "supporting": [
      "Chapter_Jumps_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}