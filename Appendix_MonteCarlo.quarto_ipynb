{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\\newcommand{\\d}{\\,\\mathrm{d}}\n",
        "\\newcommand{\\e}{\\mathrm{e}}\n",
        "\\newcommand{\\E}{\\mathbb{E}}\n",
        "\n",
        "\n",
        "\n",
        "# Introduction to Monte Carlo Simulations {#sec-c:intromontecarlo} \n",
        "\n",
        "Monte Carlo simulations  are a class of computational algorithms that use repeated random sampling to obtain numerical results. Random number generation by a computer typically relies on deterministic algorithms, known as pseudo-random number generators (PRNGs), which produce a sequence of values that only appear random. These algorithms start from an initial seed and repeatedly transform it with a mathematical function to produce a new number each time. Although true randomness cannot be achieved purely with deterministic code, PRNGs are sufficient for many applications such as simulations and gaming. In cases where a higher degree of randomness is required—for example, in cryptography—computers gather real-world data (e.g., from hardware noise) to generate true random numbers, which do not follow a purely deterministic pattern.\n",
        "\n",
        "Monte Carlo methods are widely used in fields such as finance, engineering, physics, and risk management to  solve complex problems that involve stochastic elements and are too difficult or inefficient to solve analytically or by other numrical methods.  They are particularly useful when solving problems that involve:\n",
        "- High-dimensional spaces.\n",
        "- Uncertainty and randomness.\n",
        "- Complex integrations or optimizations that are difficult to solve analytically.\n",
        "\n",
        "By simulating a large number of possible outcomes, Monte Carlo methods provide an approximation to a solution that is often more practical than attempting to derive an exact answer.\n",
        "\n",
        "## History and Applications of Monte Carlo Simulations\n",
        "\n",
        "Monte Carlo methods were first developed during the 1940s by scientists working on nuclear weapons research, including John von Neumann and Stanislaw Ulam. The name \"Monte Carlo\" was inspired by the famous casino in Monaco, reflecting the method's reliance on randomness and probability.\n",
        "\n",
        "Monte Carlo simulations have since been applied in various domains:\n",
        "\n",
        "- Finance: Option pricing, portfolio risk management, and credit risk modeling.\n",
        "- Physics and Engineering: Particle simulations, fluid dynamics, and reliability analysis.\n",
        "- Healthcare and Epidemiology: Disease spread modeling and risk assessment.\n",
        "- Business and Economics: Decision-making under uncertainty, supply chain risk management.\n",
        "\n",
        "## Principle of Monte Carlo Simulations\n",
        "\n",
        "The principle of Monte Carlo simulations is based on the concept of using randomness to approximate deterministic problems. The core idea is to use random sampling to generate a large number of possible scenarios, analyze the outcomes, and estimate probabilities or expected values. This method is particularly useful when dealing with systems that have inherent uncertainty or when an exact analytical solution is difficult to obtain.\n",
        "\n",
        "**Steps Involved in a Monte Carlo Simulation:**\n",
        "\n",
        "1. Define the Problem: Identify the mathematical or physical system being modeled.\n",
        "2. Generate Random Inputs: Use random number generators to create sample inputs that represent possible states of the system.\n",
        "3. Perform Simulations: Compute the outcome for each randomly generated input using a defined model.\n",
        "4. Aggregate Results: Analyze the distribution of outcomes to derive probabilities, expected values, or other statistical measures.\n",
        "5. Interpret and Apply Findings: Use the insights obtained to make informed decisions or refine the model.\n",
        "\n",
        "**Example Illustration:**\n",
        "\n",
        "If we want to estimate the probability of a financial portfolio achieving a certain return, we can:\n",
        "- Generate random market conditions (e.g., stock prices, interest rates).\n",
        "- Compute portfolio returns under each condition.\n",
        "- Analyze the distribution of simulated returns to assess risk and return characteristics.\n",
        "\n",
        "Monte Carlo methods leverage the Law of Large Numbers, which states that as the number of simulations increases, the estimate converges to the true expected value.\n",
        "\n",
        "\n",
        "\n",
        "## Implementing Monte Carlo Simulations in Python\n",
        "\n",
        "Python provides several libraries to implement Monte Carlo simulations effectively, including `numpy`, `scipy`, and `matplotlib`. Below, we demonstrate multiple examples of Monte Carlo simulations.\n",
        "\n",
        "**Estimating π using Monte Carlo Simulation**\n",
        "\n",
        "A classic example of Monte Carlo methods is estimating the value of π by simulating random points inside a unit square and counting how many fall inside a quarter circle.\n"
      ],
      "id": "69502211"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def monte_carlo_pi(num_samples):\n",
        "    \"\"\"\n",
        "    Estimate the value of π using the Monte Carlo method.\n",
        "    \n",
        "    - Generates `num_samples` random points inside a square [-1,1] x [-1,1].\n",
        "    - Determines how many points fall inside the unit circle.\n",
        "    - Uses the ratio of points inside the circle to estimate π.\n",
        "    - Visualizes the simulation with a scatter plot.\n",
        "    \"\"\"\n",
        "    # Generate random points\n",
        "    x = np.random.uniform(-1, 1, num_samples)\n",
        "    y = np.random.uniform(-1, 1, num_samples)\n",
        "\n",
        "    # Check if points are inside the unit circle\n",
        "    inside_circle = x**2 + y**2 <= 1\n",
        "\n",
        "    # Estimate π\n",
        "    pi_estimate = (inside_circle.sum() / num_samples) * 4\n",
        "\n",
        "    # Create figure\n",
        "    fig, ax = plt.subplots(figsize=(6,6))\n",
        "\n",
        "    # Plot points\n",
        "    ax.scatter(x[inside_circle], y[inside_circle], color='blue', s=1, label=\"Inside Circle\")\n",
        "    ax.scatter(x[~inside_circle], y[~inside_circle], color='red', s=1, label=\"Outside Circle\")\n",
        "\n",
        "    # Draw square boundary\n",
        "    square_x = [-1, 1, 1, -1, -1]\n",
        "    square_y = [-1, -1, 1, 1, -1]\n",
        "    ax.plot(square_x, square_y, color='black', linewidth=2, label=\"Square Boundary\")\n",
        "\n",
        "    # Draw circle boundary\n",
        "    circle = plt.Circle((0, 0), 1, color='black', fill=False, linewidth=2, label=\"Unit Circle\")\n",
        "    ax.add_patch(circle)\n",
        "\n",
        "    # Set limits and labels\n",
        "    ax.set_xlim(-1.1, 1.1)\n",
        "    ax.set_ylim(-1.1, 1.1)\n",
        "    ax.set_aspect('equal')\n",
        "    ax.legend()\n",
        "    ax.set_title(f\"Monte Carlo Estimation of π: {pi_estimate:.4f}\")\n",
        "\n",
        "    # Show plot\n",
        "    plt.show()\n",
        "\n",
        "    \n",
        "\n",
        "# Run simulation\n",
        "monte_carlo_pi(10000)"
      ],
      "id": "814c52d1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Monte Carlo Simulation for Portfolio Returns**\n",
        "\n",
        "Monte Carlo simulations can be used to estimate the expected return of an investment portfolio over time.\n",
        "\n",
        "Assumptions in this simulation:\n",
        "\n",
        "- Log-normal distribution of returns: Asset returns follow a normal distribution when compounded over time.\n",
        "- Independence of daily returns: Returns are randomly sampled from the normal distribution and do not exhibit autocorrelation.\n",
        "- Constant mean and volatility: The expected return (mean) and volatility (standard deviation) are assumed to remain constant over the time horizon.\n",
        "- No external shocks: The model does not account for external factors like market crashes, policy changes, or economic shifts.\n"
      ],
      "id": "ce09492a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def monte_carlo_portfolio_returns(initial_investment=100000, num_simulations=10000, time_horizon=252, mu=0.07, sigma=0.2):\n",
        "    np.random.seed(42)  # For reproducibility\n",
        "    simulated_returns = np.random.normal(mu / time_horizon, sigma / np.sqrt(time_horizon), (num_simulations, time_horizon))\n",
        "    portfolio_values = initial_investment * np.cumprod(1 + simulated_returns, axis=1)\n",
        "    expected_return = np.mean(portfolio_values[:, -1])\n",
        "    \n",
        "    plt.figure(figsize=(10,6))\n",
        "    plt.plot(portfolio_values.T, alpha=0.1, color='blue')\n",
        "    plt.title('Monte Carlo Simulation of Portfolio Returns')\n",
        "    plt.xlabel('Trading Days')\n",
        "    plt.ylabel('Portfolio Value')\n",
        "    plt.show()\n",
        "    \n",
        "    return expected_return\n",
        "\n",
        "expected_return = monte_carlo_portfolio_returns()\n",
        "print(f'Expected Portfolio Value after One Year: ${expected_return:.2f}')"
      ],
      "id": "47f8e6bd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Advantages and Limitations of Monte Carlo Simulations\n",
        "\n",
        "Advantages\n",
        "- Versatility: Can be applied to a wide range of problems in different fields.\n",
        "- Scalability: Can handle complex and high-dimensional problems that are difficult to solve analytically.\n",
        "- Flexibility: Works well with stochastic processes and probabilistic modeling.\n",
        "\n",
        "Limitations\n",
        "- Computationally Expensive: Requires large numbers of simulations for accurate results.\n",
        "- Dependent on Randomness: The accuracy of results improves with more iterations, but random variability exists.\n",
        "- Model Sensitivity: Results can be sensitive to the assumptions and distributions used in the simulation.\n"
      ],
      "id": "da8f6a41"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "env",
      "language": "python",
      "display_name": "Python 3.13 (venv)",
      "path": "/Users/austinclime/Library/Jupyter/kernels/env"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}